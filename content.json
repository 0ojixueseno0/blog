{"meta":{"title":"Hello! I'm 0o酱","subtitle":"Our world is worth fighting for.","description":null,"author":" 0o酱","url":"https://blog.im0o.top"},"posts":[{"title":"2022年3月25日博客更新记录","slug":"2022年3月25日博客更新记录","date":"2022-03-25T08:46:52.000Z","updated":"2022-05-24T06:19:06.197Z","comments":true,"path":"posts/3723ef87.html","link":"","permalink":"https://blog.im0o.top/posts/3723ef87.html","excerpt":"","text":"更换图床更新文章 使用 Gitee/Github + PicGo 实现高速稳定图床 提示： Gitee 疑似使用 302 重定向防盗链，导致图片无法正常显示，blog 全站外链图片更换至 Github + jsdelivr 代替 估计以后会用 COS 对象存储，不再使用 Gitee/Github 图床… 添加搜索添加本地搜索功能（因为我自己都找不到我自己的文章了…） 优化索引顶部索引栏合并~","raw":null,"content":null,"categories":[{"name":"杂谈/踩坑笔记","slug":"杂谈-踩坑笔记","permalink":"https://blog.im0o.top/categories/%E6%9D%82%E8%B0%88-%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://blog.im0o.top/tags/hexo/"},{"name":"优化博客","slug":"优化博客","permalink":"https://blog.im0o.top/tags/%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/"},{"name":"更新记录","slug":"更新记录","permalink":"https://blog.im0o.top/tags/%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"}]},{"title":"2021觅食记录","slug":"2021觅食记录","date":"2022-02-02T01:52:28.000Z","updated":"2022-05-24T06:19:06.200Z","comments":true,"path":"posts/ad82a4d2.html","link":"","permalink":"https://blog.im0o.top/posts/ad82a4d2.html","excerpt":"","text":"开篇小Po来存放我在2021年吃过的好吃的哇~ 感觉好像流水账哦 hhhh 性价比超高的烤肉 2021.5.4 在学校附近的商场找到了一家人均五十还吃的超级饱超多肉的烤肉店，这一堆都是吃完一大堆肉剩下的，结果是我全部吃完，和我同行的同学完全吃不下了hhhh 自助餐 2021.5.11 对应 21年5月11日 日记的吃的，那段时间吃了好几顿自助餐hhh 以至于一听到自助餐就 say no. 又是自助餐 2021.5.18 又是吃自助餐！这一堆肉都是同行的俩同学拿多了吃不下的，结果又是我全吃了，哼。 怎么能浪费粮食呢！！ 麻辣香锅er！ 2021.5.21 在苏州比赛期间，第一天到酒店办理入住之后的晚饭。 简单的早餐 2021.5.22 在苏州比赛期间入住的苏州纽威丽筠酒店提供的早餐自助。 ahhh~ 那家酒店服务特别好，特别是淋浴室的水温不需要调节就特别适合了，服务也蛮不错的，随便拍照都能出片，太酷了！ 还是自助餐 2021.5.22当天晚上做轨道交通跑了大老远，结果就吃了个自助，因为是分店，还不如之前吃得好hhh 没拍什么照片，放个冰淇淋意思意思吧~ 这家都不能烤肉，果然是分店，啧啧啧。 好多米线哦 2021.5.27 当天去了史可法纪念馆，参观结束后一群人跑去商场负一楼吃好吃的，哈哈哈哈哈w 冰淇淋咖啡欸！2021.7.22在皮市街里有一家有着两只可爱猫猫的茶吧，在里面点了甜品吃，顺带歇脚~ 芝士火锅 2021.7.22晚上在皮市街吃的芝士火锅，说实话量很少，也不咋好吃… 就颜值高了，哼哼唧唧。 番茄汤超好喝的米线 2021.10.10 嗯…其实米线很寡淡，就汤好喝了hhh 同学请客吃烤鱼！2021.10.13 同学过18大寿（？ 所以请客吃烤鱼欸~！ 薯条自由🍟！2021.10.2511元买一送一两个中份，吃了俩中份感觉不够，所以又买了俩中份hhh 从现在开始就喜欢动不动就往麦当当跑hhhhw 又是薯条自由🍟！ 2021.11.9 当天薅了一个免费吃安格斯的羊毛，是支付宝芝麻Go任务的w 呐呐呐，如果你吃麦当当了，手边有可乐的话，快试试看把盖子中间的吸管孔向下捅一下，然后对着直饮口去吸气…..哈哈哈哈哈哈你真的试了吗？快去整蛊你的朋友吧，这是新大陆啊哈哈哈哈哈哈哈w 寿喜烧！2021.11.15 这是一家特别特别难找到的店，经过同学的安利，一块儿去打卡了~ 甜甜的牛肉真的太好吃了呜呜呜~ 吃个桃桃~ 2021.11.23想什么呢，就一个普通的甜品hhh 下午茶~🥤🍰 2021.11.27 这家蛋糕便宜又好吃~ 特别适合就着茶当茶点www 🍔板烧自由！2021.12.112月的麦当当真的好多活动喔，在淘宝渠道上看到了15块3个板烧的羊毛，于是就买了一堆板烧，实现了板烧自由！所有的加起来得有三十四个了 hhhhh 虽然不全是我吃啦。 在罗森经常吃的东西 2021.12.5考完二级python（好简单，就走个过场）之后去附近的便利店买了点关东煮的萝卜，一个冰杯，一个青梅绿茶，还有一个饭团，作为午饭了。 薅汉堡王的羊毛！ 2021.12.10这么多东西实付不到5块欸！太香了，就是汉堡王的点单小程序又卡又烂，用户使用逻辑都不对，坏！ 咖喱咖喱~ 2021.12.18到这吃饭的前两天在马路对面看到过这家店的名字，叫“柠檬叶”，我们一度认为是卖茶叶的，后来在外卖平台上发现是卖咖喱的。就过来打个卡咯~ 黄咖喱是我吃的，奶香奶香的，好吃~ 绿咖喱有椰子香味~ 711！ 2021.12.18我们这儿今年才开的 7-Eleven 便利店，仅有3家，直接就是一个冲进去点关东煮！ 呜呜呜，对不起，罗森，可是711的萝卜太好吃了… 酸菜鱼欸 2021.12.23在南通比赛的第一晚吃的好吃的hhhhhw 有酸菜鱼和其他的菜w","raw":null,"content":null,"categories":[{"name":"日记","slug":"日记","permalink":"https://blog.im0o.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"年度总结","slug":"年度总结","permalink":"https://blog.im0o.top/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"好吃的","slug":"好吃的","permalink":"https://blog.im0o.top/tags/%E5%A5%BD%E5%90%83%E7%9A%84/"}]},{"title":"小记：拿到第二个国家奖学金","slug":"小记-拿到第二个国家奖学金","date":"2022-01-22T20:33:52.000Z","updated":"2022-05-24T06:19:06.147Z","comments":true,"path":"posts/faf55402.html","link":"","permalink":"https://blog.im0o.top/posts/faf55402.html","excerpt":"","text":"概要在 2021 年 12 月 21 日，站长拿到了 20-21 学年的国家奖学金，共计 6000 元。 买了台 YOGA 14C hhhhhw。 照片 Ps封面是oc约的模板图hhh 本文发布日期于2022年1月23日。","raw":null,"content":null,"categories":[{"name":"日记","slug":"日记","permalink":"https://blog.im0o.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"奖状","slug":"奖状","permalink":"https://blog.im0o.top/tags/%E5%A5%96%E7%8A%B6/"},{"name":"奖学金","slug":"奖学金","permalink":"https://blog.im0o.top/tags/%E5%A5%96%E5%AD%A6%E9%87%91/"}]},{"title":"使用Winhex进行数据恢复（13）","slug":"使用Winhex进行数据恢复（13）","date":"2021-12-20T10:34:50.000Z","updated":"2022-05-24T06:19:06.173Z","comments":true,"path":"posts/8bb239d5.html","link":"","permalink":"https://blog.im0o.top/posts/8bb239d5.html","excerpt":"","text":"前言本节将学习如何从底层恢复 exFAT 分区的 DBR，与如何从底层提取 exFAT 分区中的文件。 你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件 知识点总览 实例：恢复丢失 DBR 的 exFAT 分区 实例：从 exFAT 分区中提取文件 实例：恢复丢失 DBR 的 exFAT 分区附加虚拟磁盘文件导入题目后可以从 计算机管理 —— 磁盘管理 中看到该虚拟磁盘显示位 “没有初始化”，其大小为 50GB，均未分配分区，可以初步判断该虚拟磁盘的 MBR（主引导扇区）损坏。 使用 Winhex 打开虚拟磁盘使用 Winhex 打开该虚拟磁盘后可以观察到，主引导扇区损坏，首先填写位于最后两个字节的结束标志 55 AA。 寻找分区1 1 扇区为主引导记录-引导程序的备份。 从 2 扇区开始，使用快捷键 Ctrl+Alt+x 向下查找 16 进制数值 !00（非零），可以查找到一段数据。 该数据为 exFAT 分区 DBR 后的数据，继续向后寻找其他数据。 在 75 扇区找到了 exFAT 的 DBR，推测该分区为 exFAT 分区结构，该扇区为该分区 DBR 的备份。 选中复制整个扇区，向前跳转 12 个扇区，到达 DBR 位置并粘贴。 读取 BPB 参数，可得分区位置为 00 00 00 00 00 00 00 3F H，分区大小为 00 00 00 00 02 80 48 F5 H。 向记事本内填写该分区的参数： 分区类型：ex（07） 分区位置：63 分区大小：41,961,717 寻找分区2从分区1的 DBR 处向后跳转 41,961,717 个扇区，前往分区2。 可以看到该扇区为空，后面有着和分区1的 DBR 后一个扇区相同的数据，初步判断该分区为 exFAT 类型分区。 向后跳转 12 个扇区，查看其备份位置。 如上图，备份位置为空，可以判断该分区的备份与 DBR 被损坏。 修复 exFAT 分区的 DBR需要的数据修复 exFAT 分区的 DBR 需要以下数据： 跳转指令：EB 76 90（固定值） OEM代号：EXFAT（ASCII 固定值） 分区位置 分区大小 FAT 表起始扇区号（FAT 表相对 DBR 的位置） FAT 表大小 簇位图文件起始扇区号（= FAT 表起始扇区号 + FAT表大小） 总簇数 根目录首簇号 每扇区字节数：09（29=512 字节） 每簇扇区数：N（2N = 每簇扇区数） FAT 表个数：01（固定值） 结束标志：55 AA（固定值） 首先填写好固定值与分区位置： 计算 FAT 表偏移位置接着向后搜索 F8 FF FF FF 找到 FAT 表。 找不到 FAT 表可以向后多次搜索几次，或者打开“偏移计算” 用 FAT 表的位置减去分区 DBR 的位置：41963828 - 41961780 = 2,048 将该值填入 DBR 的 BPB参数中： 计算 FAT 表大小向后跳转 2048 扇区，到达 FAT 表位置，在空白处向下搜索 !00，找到 簇位图文件位置。 用簇位图文件位置减去 FAT 表文件位置得到 FAT 表大小：41972020 - 41963828 = 8,192 将该值填入 BPB 参数中： 计算簇位图文件偏移位置用簇位图文件位置减去分区 DBR 的位置：41972020 - 41961780 = 10,240 将该值填入 BPB 参数中： 计算每簇扇区数在簇位图文件的空白处向下搜索 !00 到大写字符文件处。 跳转后位置如下图： 记录大写字符文件位置为：41972276 向后跳转 12 个扇区，到达文件末尾，向下搜索 !00 前往根目录。 记录根目录位置为：41972340 每簇扇区数为根目录位置 - 大写字符文件位置：41972340 - 41972276 = 64 因为 26 = 64，所以在 BPB 中需要填入值 06： 计算总簇数使用 Ctrl+G 快捷键跳转到根目录：41972340 查看簇位图文件的目录项“81H”，可以得知簇位图文件的大小为 122,824 字节。 用簇位图大小乘8可以得出总簇数： 122,824 * 8 = 982,592。 在 BPB 参数中填入总簇数：982,592。 计算根目录首簇号使用 Ctrl+G 快捷键跳转到根目录：41972340 查看大写字符文件的目录项“82H”，可以得知大写字符文件所在的簇号为 6 号簇，根目录所在簇号即为 6 + 1 = 7 号簇。 将根目录首簇号填入 BPB 参数： 计算分区大小分区大小为总簇数 * 每簇扇区数：982,592 * 64 = 62,885,888 将分区大小填入 BPB 参数： 将分区数据计入记事本向记事本内填写该分区的参数： 分区类型：ex（07） 分区位置：41,961,780 分区大小：62,885,888 填写 MBR 主引导记录将记事本中记录的数据填入 MBR 的分区表中并保存： 在磁盘管理中查看分区情况： 手动填写的 exFAT 分区无法被 Windows 资源管理器读出，但是可以通过 Winhex 识别到该分区： 也可以直接双击打开分区 2： 至此，本题结束。 实例：从 exFAT 分区中提取文件 本题的目标文件为：hkl039.png 附加虚拟磁盘文件导入题目后可以从 计算机管理 —— 磁盘管理 中看到该虚拟磁盘显示位 “没有初始化”，其大小为 25GB，均未分配分区，可以初步判断该虚拟磁盘的 MBR（主引导扇区）损坏。 使用 Winhex 打开虚拟磁盘 使用 Winhex 打开该虚拟磁盘何以观察到整个主引导扇区都为空，首先填写 MBR 的结束标志 55 AA，接着向下寻找分区。 寻找分区 向下查找 16 进制数值 !00，如图所示，可以判断出这段数据疑似簇位图文件，在空白处继续向下搜索非零。 由上图可知，我们搜索到了大写字符文件，可以判断该分区为 exFAT 分区，记录大写字符文件的起始位置：10559 计算每簇扇区数向后跳转 12 个扇区，搜索非零，找到根目录： 记录根目录位置：10623，与大写字符位置相减得出每簇扇区数为：10623 - 10559 = 64。 找到文件的目录项使用快捷键 Ctrl+F 向下搜索 Unicode 字符串：hkl039.png 搜索到了文件 hkl039.png 的目录项。 查看其文件属性 “C0H”，可以得知该文件的起始簇号为：00 00 00 14H 文件大小为：00 04 55 D8 H 转化为十进制后： 起始簇号 20 文件大小 284,120 计算文件位置回到根目录，查看大写字符文件的目录项 “82H” 属性的起始簇号： 大写字符文件的起始簇号为：6 号簇 根目录首簇号为 6 + 1 = 7 号簇 当前位于根目录，需要向后跳转 20 - 7 = 13 个簇达到文件数据的起始。 跳转至文件数据区，恢复文件使用快捷键 Alt + G 向后跳转 13 * 64 = 832 扇区到达目标文件的数据位置： 右键文件头，点击“选块起始位置”，向后跳转 284,120 字节，到达文件末尾： 右键点击“选块尾部”选中整个文件数据： 右键选块——编辑——复制选块——至新文件： 将数据另存为一个 png 文件： 打开文件后没有提示损坏： 至此，本题结束。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"exFAT","slug":"exFAT","permalink":"https://blog.im0o.top/tags/exFAT/"},{"name":"文件系统","slug":"文件系统","permalink":"https://blog.im0o.top/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"}]},{"title":"使用Winhex进行数据恢复（12）","slug":"使用Winhex进行数据恢复（12）","date":"2021-12-17T01:32:49.000Z","updated":"2022-05-24T06:19:06.174Z","comments":true,"path":"posts/330e5eb0.html","link":"","permalink":"https://blog.im0o.top/posts/330e5eb0.html","excerpt":"","text":"前言本节将学习到 exFAT 文件系统的 FAT 表、簇位图、目录结构。 知识点总览 exFAT 分区 FAT 表结构 exFAT 分区 Bitmap 结构 exFAT 分区大写字符文件结构 exFAT 分区目录结构 exFAT 分区 FAT 表结构FAT（File Allocation Table）即文件分配表，对于ExFAT文件系统来讲也是很重要的一个组成部分，ExFAT文件系统FAT表的功能主要是记录不连续存储的文件的簇链，所以在FAT中看到数值为0的FAT项，并不能说明该FAT项对应的簇是可用簇。 系统是如何定位到 FAT 表的？① 从 MBR 的分区表定位到该分区的 DBR 扇区。 ② 读取 DBR 的 BPB 参数，主要读取 “ FAT 表起始扇区号” 这个参数，它在 DBR 的 50H~54H 偏移处。 ③ 读取到 “FAT 表起始扇区号” 这个参数的值后，跳转到该分区的偏移扇区，这里就是 FAT 表的开始。 FAT 表的实际应用把分区格式化为 exFAT 文件系统时，格式化程序会把分配给 FAT 表的第一个扇区清零，然后写入 0 号 FAT 项和 1 号 FAT 项，另外还会写入簇位图文件、大写字符文件及根目录所占簇对应的 FAT 项。 由上图可以看出每个 FAT 项占用 4 字节：其中 0 号 FAT 项描述介质类型，其首字节为“F8”，表示介质类型为硬盘；1 号FAT项写入 4 个“FF”；从 2 号 FAT 项开始对应 2 号簇，3 号FAT项对应3号簇，一直到最后一个簇。目前 2、3、4 三个 FAT 项中都是结束标志，说明簇位图文件、大写字符文件、根目录各占一个簇。 除了这5个FAT项以外，其他FAT项都是0，但这并不能说这些FAT项对应的簇就是空簇。 exFAT 分区 Bitmap 结构ExFAT 文件系统的 FAT 表之后就是数据区了，但数据区并不一定紧跟在 FAT 表之后，FAT 表后面可能还会有一些保留扇区，每个分区不一样，这要看实际情况。所以不能通过 Bitmap 的位置减去 FAT 表的位置直接计算分区大小。数据区的开始位置在 DBR 的 BPB 中有描述，“首簇起始扇区号”起始就是数据区的开始。数据区中第一个簇就是 2 号簇，2 号簇一般都分配给簇位图文件使用。 簇位图文件是在分区格式化时创建的，该文件不允许用户访问和修改。 上图为一个 exFAT 分区的 Bitmap。 该扇区中只有一个字节“07H”，这就是簇位图文件的内容。 簇位图文件是ExFAT文件系统中的一个元文件，类似于NTFS文件系统中的元文件$BitMap，它的作用是用来管理分区中簇的使用情况。簇位图文件中的每一个位，映射到数据区中的每一个簇。如果某个簇分配给了文件，该簇在簇位图文件中对应的位就会被填入“1”，表示该簇已经占用；如果没用使用的空簇，它们在簇位图文件中对应的位就是“0”。 exFAT 分区大写字符文件结构大写字符文件是 exFAT 文件系统中的第二个元文件，类似于NTFS文件系统中的元文件$UpCase。Unicode字母表中每一个字符在这个文件中都有一个对应的条目，用于比较、排序、计算Hash值等方面。 大写字符文件是在分区格式化时创建的，该文件不允许用户访问和修改。 簇位图文件结束后的下一个簇一般就分配给大写字符文件使用。 大写字符文件的大小固定为 5836 字节，约为 12 个扇区。 下图为一个大写字符文件的第一个扇区的前半部分。 从图中可以看到其内容都是Unicode字母表中的字符，每一个字符占用两个字节。 exFAT 分区目录结构目录项对于 exFAT 文件系统来讲是非常重要的组成部分，其主要作用及结构特点如下： ① 分区中的每个文件和文件夹（也称为目录）都被分配多个大小为 32字节 的目录项，用以描述文件或文件夹的属性、大小、起始簇号和时间、日期等信息，当然还会把文件名或目录名也记录在目录项中。 ② 在 exFAT 文件系统中，目录也被视为特殊类型的文件，所以每个目录也与文件一样有目录项。 ③ 在 exFAT 文件系统下，分区根目录下的文件及文件夹的目录项存放在根目录区中，分区子目录下的文件及文件夹的目录项存放在数据区相应的簇中。 ④ exFAT文件系统目录项的第一个字节用来描述目录项的类型，剩下的31字节用来记录文件的相关信息。 ⑤ 根据目录项的作用和结构特点，可以把目录项分为四种类型： 卷标目录项 簇位图文件的目录项 大写字符文件的目录项 用户文件的目录项 卷标目录项卷标就是一个分区的名字，可以在格式化分区时创建，也可以随时修改。ExFAT文件系统把卷标当作文件，用文件目录项进行管理。系统为卷标建一个目录项，放在根目录区中。 卷标的目录项占用32字节，其中第一个字节是特征值，用来描述类型。 卷标目录项的特征值为“83H”，如果没有卷标或者将卷标删除，该特征值为“03H”。 没有卷标的目录项 上图为一个没有卷标的 exFAT 类型分区，其特征值为“03H”，占用 32 字节。 有卷标的目录项接下来查看有卷标的目录项（M:）： 上图为一个有卷标的 exFAT 类型分区，其特征值为“83H”，紧接着标识符后的即为卷标名，共占用 32 字节。 卷标的长度理论上为11字符，但实际上可以达到15字符。 被修改过卷标的目录项将上图 “M:” 分区的卷标改为 expart 后从底层查看该属性。 由上图可以看出，该分区根目录的第一个目录项 “83H” 的内容被修改了。 接下来查看将 “没有卷标的目录项” 改为 “有卷标的目录项”： 将 “N:” 分区的卷标改为 newpart 后从底层查看该属性。 从根目录可以看出，该分区的第一个目录项还是 “03H”。 但是在最后一个目录项（改完卷标后没有做任何文件操作）中可以看到一条特征值为 “83H” 的目录项。 该目录项为刚刚修改的 newpart，再次修改卷标后，只有该目录项变更值。 簇位图文件的目录项ExFAT文件系统格式化时会创建一个簇位图文件，并为其建一个目录项，放在根目录区中。 簇位图文件的目录项占用32字节，其中第一个字节是特征值，用来描述类型。簇位图文件目录项的特征值为“81H”。 ExFAT簇位图文件目录项的含义： 字节偏移 字段长度（字节） 内容及含义 0x00 1 目录项的类型（簇位图文件目录项的特征值为“81H”） 0x01 1 保留 0x02 18 保留 0x14 4 起始簇号 0x18 8 文件大小 簇位图文件的目录项有如下特点： ①对于ExFAT格式的分区，簇位图文件起始簇号一般都为2。 ②簇位图文件的目录项中不记录时间戳。 下图为一个示例分区的簇位图目录项： 从上图可以看出，该分区的簇位图的起始簇号为：00 00 00 02 H 簇位图的大小为：00 00 D0 12 H (53,266 字节) 故该分区 BPB 参数中的 “分区总簇数” 为 (53266 - 1) * 8 ≈ 426,120 由于最后一个字节不一定完整表示 8 个簇，为避免误差，则将字节数 - 1，算出来的结果与原总簇号最多误差 8 个簇。 大写字符文件的目录项ExFAT文件系统格式化时会创建一个大写字符文件文件，并为其建一个目录项，放在根目录区中。 大写字符文件的目录项占用32字节，其中第一个字节是特征值，用来描述类型。大写字符文件目录项的特征值为“82H”。 ExFAT大写字符文件目录项的含义： 字节偏移 字段长度（字节） 内容及含义 0x00 1 目录项的类型（大写字符文件目录项的特征值为“82H”） 0x01 3 保留 0x08 14 保留 0x14 4 起始簇号 0x18 8 文件大小 大写字符文件的目录项有如下特点： ①对于ExFAT格式的分区，大写字符文件的目录项一般都跟在簇位图文件的目录项之后。 ②大写字符文件的目录项中不记录时间戳。 下图为一个示例分区的大写字符文件目录项： 从上图可以看出，该分区的大写字符文件的起始簇号为：00 00 00 04 H 大写字符文件的大小为：00 00 16 CC H (5,836 字节) 跳转到大写字符文件数据区（4号簇）后查看其扇区位置： 大写字符的位置为 6,335 号扇区 根目录的数据区在大写字符后一个簇（即5号簇），向下跳转 5836 字节后搜索 !00 到达根目录： 根目录的位置为 6,399 扇区。 用根目录的位置（5号簇）减去大写字符文件位置（4号簇）可得每簇扇区数为：6399 - 6335 = 64 。 用户文件的目录项ExFAT文件系统中每个用户文件至少有三个目录项，这三个目录项被称为三个属性：第一个目录项称为“属性1”，目录项首字节的特征值为“85H”；第二个目录项称为“属性2”，目录项首字节的特征值为“C0H”；第三个目录项称为“属性3”，目录项首字节的特征值为“C1H”。 “属性1”目录项“属性1”目录项用来记录该目录项的附属目录项数、校验和、文件属性、时间戳等信息。 用户文件的“属性1”目录项如图所示。 用户文件的“属性1”目录项的含义 字节偏移 字段长度（字节） 内容及含义 0x00 1 目录项的类型（“属性1”目录项的特征值为“85H”） 0x01 1 附属目录项数 0x02 2 校验和 0x04 4 文件属性 0x08 4 文件创建时间 0x0C 4 文件最后修改时间 0x10 4 文件最后访问时间 0x14 1 文件创建时间精确至10ms 0x15 3 保留 0x18 8 保留 ①0x00～0x00：类型。该参数为目录项类型的特征值，“属性1”目录项的特征值为“85H”。 ②0x01～0x01：附属目录项数。该参数指除此目录项外，该文件还有几个目录项，当前值为2，说明这个文件除了“属性1”目录项外，后面还有两个目录项，起始就是“属性2”目录项和“属性3”目录项。 ③0x02～0x03：校验和。该参数是校验算法算出来的目录项的校验和。 ④0x04～0x07：文件属性。该参数描述文件的常规属性，属性具体含义见下表。 二进制值 属性含义 二进制值 属性含义 00000000 读/写 00001000 卷标 00000001 只读 00010000 子目录 00000010 隐藏 00100000 存档 00000100 系统 ⑤0x08～0x0B：文件创建时间。该参数是文件的具体创建时间，格式为32位的DOS时间，包括年、月、日、时、分、秒，具体表示方法与FAT文件系统一样，这里就不再重复讲述。 ⑥0x0C～0x0F：文件最后修改时间。该参数是文件最后一次修改时的具体时间，格式为32位的DOS时间，包括年、月、日、时、分、秒，具体表示方法跟FAT文件系统一样，这里就不再重复讲述。 ⑦0x10～0x13：文件最后访问时间。该参数是文件最后一次访问时的具体时间，格式为32位的DOS时间，包括年、月、日，也包含时、分、秒，这一点跟FAT不一样，FAT中改时间只有年、月、日，没有时、分、秒。 ⑧0x14～0x14：文件创建时间，精确至10ms。该参数是文件的具体创建时间精确到10ms的数值。 “属性2”目录项“属性2”目录项用来记录文件是否有碎片、文件名的字符数、文件名的Hash值、文件的起始簇号及大小等信息。 用户文件的“属性2”目录项如图所示。 用户文件的“属性2”目录项的含义 字节偏移 字段长度（字节） 内容及含义 0x00 1 目录项的类型（“属性2”目录项的特征值为“C0H”） 0x01 1 文件碎片标志 0x02 1 保留 0x03 1 文件名字符数N 0x04 2 文件名Hash值 0x06 2 保留 0x08 8 文件大小1 0x10 4 保留 0x14 4 起始簇号 0x18 8 文件大小2 ①0x00～0x00：类型。该参数为目录项类型的特征值，“属性2”目录项的特征值为“C0H”。 ②0x01～0x01：文件碎片标志。该参数能够反映出文件是否连续存放。如果是连续存放没有碎片，该标志为03H；如果不是连续存放，文件有碎片，该标志就为01H。 ③0x03～0x03：文件名字符数。该参数用来说明文件名的长度，ExFAT文件系统的文件名用Unicode码表示，每个字符占用两个字节。 ④0x04～0x05：文件名Hash值。该参数是根据相应算法算出的文件名的校验值，当文件名发生改变时，Hash值也会发生改变，但当文件移动时，该值并不改变。 ⑤0x08～0x0F：文件大小1。该参数是文件的总字节数，用64位记录文件大小。 ⑥0x14～0x17：起始簇号。该参数描述文件的起始簇号，用32位记录簇的地址。 ⑦0x18～0x1F：文件大小2。该参数也是文件的总字节数，是为NTFS文件系统的压缩属性准备的，一般情况下与“文件大小1”的数值保持一致。 “属性3”目录项“属性3”目录项用来具体记录文件的名称。如果文件名很长，“属性3”可以包含多个目录项，每个目录项称为一个片段，从上至下依次记录文件名的每一个字符，记录的方向刚好跟FAT文件系统中长文件名目录项从下至上的顺序相反。 用户文件的“属性3”目录项的含义 字节偏移 字段长度（字节） 内容及含义 0x00 1 目录项的类型（“属性3”目录项的特征值为“C1H”） 0x01 1 保留 0x02 2N 文件名 因为该文件名很短，所以只有一个片段，如果文件名足够长，则有多个“属性3”（C1H）。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"exFAT","slug":"exFAT","permalink":"https://blog.im0o.top/tags/exFAT/"},{"name":"文件系统","slug":"文件系统","permalink":"https://blog.im0o.top/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"}]},{"title":"What2Eat - 吃点啥？","slug":"What2Eat-吃点啥？","date":"2021-12-16T01:52:21.000Z","updated":"2022-05-24T06:19:06.180Z","comments":true,"path":"posts/76c8cbd5.html","link":"","permalink":"https://blog.im0o.top/posts/76c8cbd5.html","excerpt":"","text":"What To Eat? 吃点啥儿？这是一个可以决定人类命运的神奇工具，当你在犹豫吃什么的时候，不妨使用 吃点啥儿 帮助你决定你接下来要吃什么吧！ 网站截图 工程说明What2Eat(WhatToEat) - 吃点啥儿，是基于 Vue.js 开发，使用 Vercel 服务部署的一个轻量的小工具。 源码开源至 trash-station/whattoeat，欢迎提交图片PR，图片将会通过 Github Actions 使用 Python 脚本自动添加进网站配置。 资源来源 图片素材来源： 食物图片部分来自 pcrbot/whattoeat: 今天吃点啥 (github.com) 商铺图片部分来自 美团，饿了么 商铺头像 Logo 来源：John Frank Wayre/Helen Rae Cooper 未来打算开放 “吃点啥儿” API，使用 GET 请求可以获取到一张美食图片之类的… 写在最后 123&lt;a href=&quot;https://what2eat.im0o.top&quot;&gt;&lt;img src=&quot;https://what2eat.im0o.top/static/what2eat.jpg&quot; /&gt;&lt;/a&gt;","raw":null,"content":null,"categories":[{"name":"小玩意儿","slug":"小玩意儿","permalink":"https://blog.im0o.top/categories/%E5%B0%8F%E7%8E%A9%E6%84%8F%E5%84%BF/"}],"tags":[{"name":"what2eat","slug":"what2eat","permalink":"https://blog.im0o.top/tags/what2eat/"},{"name":"html","slug":"html","permalink":"https://blog.im0o.top/tags/html/"},{"name":"吃点啥","slug":"吃点啥","permalink":"https://blog.im0o.top/tags/%E5%90%83%E7%82%B9%E5%95%A5/"},{"name":"vue.js","slug":"vue-js","permalink":"https://blog.im0o.top/tags/vue-js/"},{"name":"elementui","slug":"elementui","permalink":"https://blog.im0o.top/tags/elementui/"}]},{"title":"使用Winhex进行数据恢复（11）","slug":"使用Winhex进行数据恢复（11）","date":"2021-12-08T06:48:55.000Z","updated":"2022-05-24T06:19:06.175Z","comments":true,"path":"posts/3dd75753.html","link":"","permalink":"https://blog.im0o.top/posts/3dd75753.html","excerpt":"","text":"前言本节将学习 exFAT 文件系统的特点、结构及引导扇区。 你可以前往 exFAT 文件系统规范 - Win32 apps | Microsoft Docs 查看 Microsoft 官方对 exFAT 文件系统的描述。 知识点总览 exFAT 文件系统的特点 exFAT 文件系统的结构 exFAT 文件系统的 DBR 分析 exFAT 文件系统的特点 本小节多为 exFAT 相关理论，与实操无关，可以跳过本小节。 exFAT全称为Extended File Allocation Table File System，即扩展文件分配表，是微软在Windows Embeded 6.0（包括Windows CE 6.0、Windows Mobile）中引入的一种适合于闪存的文件系统。 exFAT 专为满足当今数字媒体的需求而构建，无论使用何种设备或操作系统，exFAT 均可使用永久性或可移动媒体进行无缝文件传输和存储。 消费者和企业正在创造越来越多的高质量照片、视频和其他数字媒体。 一旦创建，该媒体就需要在多个平台和产品之间存储和共享。 云技术可以简化共享流程，但是在许多应用程序中，可移动存储的便利性是无法替代的。 扩展文件分配表（exFAT）是 Microsoft 专利文件系统。exFAT 可以处理非常大的文件，并可以在使用可移动存储的设备之间进行无缝文件交换，而与设备或操作系统无关。 exFAT 结合了广泛的互操作性和几乎无限规模的文件处理能力，对于寻求有效的文件存储和传输解决方案的公司来说，exFAT 是必不可少的。 exFAT 只是 Microsoft 授予原始设备制造商（OEM）的一项技术，可帮助他们创建移动设备和平板电脑，明天的设备物联网。exFAT 还可以用于台式计算机、工业设备、照相机以及许多其他需要互操作文件存储和传输解决方案的设备中。 来源：exFAT 的许可| Microsoft IP 许可 exFAT文件系统跟原来的FAT文件系统相比，主要有以下优点： 可拓展至更大磁盘大小，理论上64ZiB，推荐最大512TiB，相较32位限制的FAT32分区的2TB（每扇区512字节）。 理论的文件大小限制为264 - 1字节（16 exbibytes - 1），而FAT32文件系统中单一文件限制大小为232 - 1字节（4 GiB）。对于单档超过4 GB的用户来说，exFAT提供了很好的解决方案。 簇大小最大可为每扇区225字节，最大32 MB。 由于采用了空余空间寻址，空间分配和删除的性能得以改进。 在单一文件夹内支持超过216个文件。 支持访问控制清单（但在Windows Vista SP1中尚未支持）。 提供给OEM的可定义参数可以使这个文件系统适应不同特色的设备。 支持热插拔资料完整无损机制Transaction-Safe FAT（TFAT，在WinCE中可选的功能）。 时间戳记能够使用UTC时间而不仅仅是所在时区（从Vista SP2开始） 来源：exFAT - 维基百科，自由的百科全书 (wikipedia.org) exFAT文件系统跟原来的FAT文件系统相比，主要有以下缺点： 某些旧设备（如个人数码助理（PDA）和数字相机）无法使用exFAT格式的存储卡。 使用exFAT的设备将不能用Windows Vista的ReadyBoost功能。（Windows 7 以上版本中的新的exFAT系统支持ReadyBoost） 专利授权方式不明确。夏普、RIM、任天堂分别和微软达成了exFAT授权协议。存在专利费。微软曾经为FAT的一部分申请专利。曾经有用户从三星的Android中分离出不基于FUSE实现的exFAT内核模块代码并按照Linux的GPL协议释放出来，被认为三星得到微软支持下开发的。之后三星也正式释放了相应模块代码。 2019年8月，微软公开了exFAT的技术文档，并支持将exFAT功能集成到Linux内核中。Linux内核将于版本5.4中提供初步支持。 Windows XP SP3之前的旧版Windows暂时不支持exFAT，Windows XP可以安装修改更新KB955704来支持exFAT，Linux操作系统需要通过第三方开发的文件系统驱动来支持exFAT（例如，谷歌公司的exfat工具、FUSE exfat、exfat-nofuse、sdfat），Mac OS X可透过升级至10.6.5来全面支持exFAT。 UEFI不支持exFAT，只支持FAT和FAT32，格式化为exFAT的EFI启动磁盘将无法被识别。然而现今支持EFI引导安装的主流操作系统，其安装文件都存在单个文件大于4GB的情况（如Windows 10的install.wim、Linux发行版放置系统文件的SquashFS映像），显然不能再使用FAT与FAT32。 来源：exFAT - 维基百科，自由的百科全书 (wikipedia.org) exFAT 文件系统的结构 exFAT 文件系统是由 DBR 及其保留扇区、FAT、簇位图文件、大写字符文件、用户数据区五个部分组成。 这些结构是在分区被格式化时创建出来的，它们的含义如下： ① DBR及其保留扇区。DBR的全称为DOS Boot Record，含义是DOS引导记录，也称为操作系统引导记录。在DBR之后往往有一些保留扇区，其中12号扇区为DBR的备份。 ② FAT。FAT的全称为File Allocation Table，含义是文件分配表。 ExFAT一般只有一份FAT，而不像FAT文件系统那样有两个FAT表：FAT1和FAT2。 ③ 簇位图文件。簇位图文件是ExFAT文件系统中的一个元文件，类似于NTFS文件系统中的元文件$BitMap，用来管理分区中簇的使用情况。 ④ 大写字符文件。是ExFAT文件系统中的第二个元文件，类似于NTFS文件系统中的元文件$UpCase，Unicode字母表中每一个字符在这个文件中都有一个对应的条目，用于比较、排序、计算Hash值等方面。 该文件大小固定为5836字节。 ⑤ 用户数据区。是ExFAT文件系统的主要区域，用来存放用户的文件及目录。 exFAT 文件系统的 DBR 分析ExFAT文件系统的DBR由6部分组成，分别为跳转指令、OEM代号、保留区、BPB参数、引导程序和结束标志。 1．跳转指令 跳转指令本身占用两个字节，它将程序执行流程跳转到引导程序处。例如，当前DBR中的“EB 76”，就是代表汇编语言的“JMP 76”。需要注意该指令本身占用两个字节，计算跳转目标地址时以该指令的下一字节为基准，所以实际执行的下一条指令应该位于78H。紧接着跳转指令的是一条空指令NOP（90H）。 2．OEM代号 这部分占8字节，其内容由创建该文件系统的OEM厂商具体安排。例如，微软的Windows Vista系统将此处设置为文件系统类型“ExFAT”。 3．保留区 从DBR的0BH～3FH处是原来的FAT文件系统BPB所占用的空间，ExFAT文件系统不使用这些字节。 4．BPB（BIOS Parameter Block，BIOS参数块） ExFAT的BPB从第DBR的40BH偏移处开始，占用56字节，记录了有关该文件系统的重要信息。 （1）0x40～0x47：隐藏扇区数 隐藏扇区数是指本分区之前使用的扇区数，该值与分区表中所描述的该分区的起始扇区号一致：对于主磁盘分区来讲，是MBR到该分区DBR之间的扇区数；对于扩展分区中的逻辑驱动器来讲，是其EBR到该分区DBR之间的扇区数。 （2）0x48～0x4F：扇区总数 扇区总数是指分区的总扇区数，由8字节组成，也就是64位，所以能管理的最大分区为264×512＝273Byte＝8ZB。微软官方网站提供的信息称：ExFAT理论上最大可以支持64ZB的分区，但从这里只能算出8ZB。 （3）0x50～0x53：FAT起始扇区号 该值为相对于文件系统起始号扇区而言，也就是从DBR到FAT表之间的扇区数。 （4）0x54～0x57：FAT扇区数 是指FAT表包含的扇区数，ExFAT文件系统只有一份FAT表。 （5）0x58～0x5B：首簇起始扇区号 该值用来描述文件系统中的第1个簇的起始扇区号。与传统FAT文件系统一样，ExFAT文件系统的第一个簇也是2号簇，通常2号簇分配给簇位图文件使用，因此，该值也就是簇位图文件的起始扇区号。 （6）0x5C～0x5F：分区内的总簇数 分区内的总簇数是指从分区内第一个簇算起，到分区末尾所包含的簇的总数。 （7）0x60～0x63：根目录首簇号 分区在格式化为ExFAT文件系统时，格式化程序会在数据区中指派一个簇作为ExFAT的根目录区的开始，并把该簇号记录在BPB中。通常分区中的第一个簇被分配给簇位图文件使用，簇位图文件之后是大写字符文件，大写字符文件的下一个簇就根目录的起始位置了。 （8）0x64～0x67：卷序列号 卷序列号是格式化程序在创建文件系统时生成的一组4字节的随机数值。 （9）0x6C～0x6C：每扇区字节数描述 这个字节用来描述每扇区包含的字节数，描述方法为，假设此处值为N，则每扇区大小字节数为2N。例如，本例中该值为“09”，即每扇区大小字节数为29＝512。 （10）0x6D～0x6D：每簇扇区数描述 这个字节用来描述每簇包含的扇区数，描述方法为，假设此处值为N，则每簇扇区数为2N。例如，本例中该值为“06”，即每簇扇区数为26＝64。 ExFAT文件系统能够支持从512B～32MB的簇大小。 5．引导程序 ExFAT的DBR引导程序占用390字节（78H～1FDH）。这部分字节对于ExFAT来说也是很重要的，如果这些数据被破坏，文件系统将无法使用。 6．结束标志 ExFAT的DBR结束标志与FAT的DBR结束标志一样，也是“55 AA”。 在ExFAT的DBR之后还有很多保留扇区，其中12号扇区为DBR的备份，如果DBR遭到破坏，可以用其备份DBR进行修复。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"exFAT","slug":"exFAT","permalink":"https://blog.im0o.top/tags/exFAT/"},{"name":"文件系统","slug":"文件系统","permalink":"https://blog.im0o.top/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"}]},{"title":"使用Winhex进行数据恢复（10）","slug":"使用Winhex进行数据恢复（10）","date":"2021-12-07T08:14:45.000Z","updated":"2022-05-24T06:19:06.175Z","comments":true,"path":"posts/9907963b.html","link":"","permalink":"https://blog.im0o.top/posts/9907963b.html","excerpt":"","text":"前言本节将进行学习 GPT（GUID Partition Table 全局唯一标识分区表）与三种U盘的工作模式。 知识点总览 GPT 磁盘分区的特点 GPT 磁盘分区的结构 U盘 的工作模式 HDD 模式 FDD 模式 ZIP 模式 GPT 磁盘分区的特点GPT 是 GUID Partition Table 的缩写，其含义为“全局唯一标识磁盘分区表”，GUID 是 “全局唯一标识符（Globally Unique Identifier）”的缩写 GPT 分区有如下特点： 目前能够支持 GPT 磁盘分区的操作系统有 系统名称 备注 Windows Server 2008 64位 及以后版本 Windows XP 64 位 无法作为 efi 引导 Windows 7 64 位 及以后版本 MacOS X Linux 理论上，GPT 磁盘在长度上最大可达 264 个逻辑块，每个逻辑块容量一般为 512 字节，最大分区（磁盘）容量受操作系统版本的影响。Windows XP 和 Windows Server 2003 的原始版本中，每个区物理磁盘的最大容量为 2TB。对于 Windows Server 2003 SPI、Windows XP x64 版本及以后的版本，支持最大原始分区为 18EB。 EFI 规范对分区数量几乎没有限制，但是 Windows 实现限制的分区数量为 128 个。 与支持最大卷为2 TB（Terabytes）并且每个磁盘最多有4个主分区（或3个主分区，1个扩展分区和无限制的逻辑驱动器）的MBR磁盘分区的样式相比，GPT磁盘分区样式支持最大为128个分割，一个分割最大18 EB（Exabytes），只受到操作系统限制（由于分区表本身需要占用一定空间，最初规划硬盘分区时，留给分区表的空间决定了最多可以有多少个分区，IA-64版Windows限制最多有128个分区，这也是EFI标准规定的分区表的最小尺寸）。与MBR分区的磁盘不同，至关重要的平台操作数据位于分区，而不是位于非分区或隐藏扇区。另外，GPT分区磁盘有备份分区表来提高分区数据结构的完整性。在UEFI系统上，通常是通过ESP分区中的EFI应用程序文件启动GPT硬盘上的操作系统，而不是活动主分区上的引导程序。 来源：主引导记录 - 维基百科，自由的百科全书 (wikipedia.org) GPT 中分区表的存储空间大小会限制分区数量。 Windows Server 2008 等操作系统只能在 GPT 磁盘分区上进行数据操作，只有基于 Itanium 的 Windows 系统才能从 GPT 分区上启动。 GPT 和 MBR 结构可以在支持 GPT 的系统上混合使用，但支持 EFI 的系统要求启动分区位于 GPT 磁盘上，另一个硬盘可以是 MBR，也可以是 GPT。 在系统支持的情况下可以将 MBR 磁盘转换为 GPT 磁盘，但是只有在磁盘为空的情况下才可以将 GPT 磁盘转换为 MBR 磁盘，否则会清空所有数据。 GPT 磁盘尾部存有分区表备份。在磁盘的首尾部分存有相同的分区表，当其中一份被破坏后，可以通过另一份进行修复。 GPT 磁盘分区的结构 原上传者为英语维基百科的Kbolino - Transferred from en.wikipedia to Commons. Transfer was stated to be made by User:Kbolino. CC BY-SA 2.5 File:GUID Partition Table Scheme.svg 创作时间：2007年1月27日 (原始上传日期) 保护MBR保护 MBR 位于 GPT 磁盘的第 1 个扇区，即 0 号扇区，由磁盘签名、MBR 磁盘分区表和结束标志组成，如下图所示。 GPT 头GPT 头位于 GPT 磁盘的第 2 个扇区，即 1 号扇区，该磁盘是创建 GPT 磁盘时生成的，GPT 头会定义分区表的起始位置、分区表的结束位置、每个分区表项的大小、分区表项的个数及分区表的校验和等信息，如下图所示。 GPT头中各个参数的含义： 使用模板管理器查看该数值为： 对这些参数具体分析如下。 ①00H～07H。长度为8字节，是GPT头的签名，十六进制为“45 46 49 20 50 41 52 54”，ASCII码为“EFI PART”。 ②08H～0BH。长度为4字节，表示版本号。 ③0CH～0FH。长度为4字节，是GPT头的总字节数，当前值为92，说明GPT头占用92字节。 ④10H～13H。长度为4字节，是GPT头的CRC校验和。 ⑤14H～17H。长度为4字节，保留不用。 ⑥18H～1FH。长度为8字节，表示GPT头所在扇区号，通常为1号扇区，也就是GPT磁盘的第二个扇区。 ⑦20H～27H。长度为8字节，是GPT头备份的所在扇区号，也就是GPT磁盘的最后一个扇区，当前值为83,886,079。 ⑧28H～2FH。长度为8字节，是GPT分区区域的起始扇区号，当前值为34，GPT分区区域通常都是起始于GPT磁盘的34号扇区。 ⑨30H～37H。长度为8字节，是GPT分区区域的结束扇区号，当前值为83,886,046。 ⑩38H～47H。长度为16字节，是GPT磁盘的GUID。 ⑪ 48H～4FH。长度为8字节，表示GPT分区表的起始扇区号，当前值为2，GPT分区表通常都是起始于GPT磁盘的2号扇区。 ⑫50H～53H。长度为4字节，表示分区表项的个数。Windows系统限定GPT分区个数为128，每个分区占用一个分区表项，所以该值为128。 ⑬54H～57H。长度为4字节，每个分区表项占用字节数，该值固定为128。 ⑭58H～5BH。长度为4字节，是分区表的CRC校验和。 ⑮5CH～1FFH。长度为420字节，保留不用。 分区表分区表位于GPT磁盘的2～33号扇区，一共占用32个扇区，能够容纳128个分区表项，每个分区表项大小为128字节。因为每个分区表项管理一个分区，所以Windows系统允许GPT磁盘创建128个分区。 每个分区表项中记录着分区的起始和结束地址、分区类型的GUID、分区名字、分区属性和分区GUID。 分区表项中各个参数的含义 对这些参数具体分析如下。 ①00H～0FH。长度为16字节，用来描述分区类型，其类型可以是前面提到过的EFI系统分区（ESP）、微软保留分区（MSR）、LDM元数据分区、LDM数据分区、OEM分区、主分区。 GPT头备份GPT头有一个备份，放在GPT磁盘的最后一个扇区，但这个GPT头备份并不是GPT头的简单复制，它们的结构虽然一样，但其中的参数却有一些区别。 对这些参数具体分析如下。 ①00H～07H。长度为8字节，是GPT头的签名，十六进制为“45 46 49 20 50 41 52 54”，ASCII码为“EFI PART”。 ②08H～0BH。长度为4字节，表示版本号。 ③0CH～0FH。长度为4字节，是GPT头备份的总字节数。当前值为92，说明GPT头备份占用92字节。 ④10H～13H。长度为4字节，是GPT头备份的CRC校验和。 ⑤14H～17H。长度为4字节，保留不用。 ⑥18H～1FH。长度为8字节，表示GPT头备份所在扇区号，当前值为83,886,079号扇区，也就是GPT磁盘的最后一个扇区。 ⑦20H～27H。长度为8字节，是GPT头的所在扇区号，当前值为1号扇区，也就是GPT磁盘的第二个扇区。 ⑧28H～2FH。长度为8字节，是GPT分区区域的起始扇区号，当前值为34，GPT分区区域通常都是起始于GPT磁盘的34号扇区。 ⑨30H～37H。长度为8字节，是GPT分区区域的结束扇区号，当前值为83,886,046。 ⑩38H～47H。长度为16字节，是GPT磁盘的GUID。 ⑪ 48H～4FH。长度为8字节，表示GPT分区表备份的起始扇区号，当前值为83,886,047，这也是分区区域结束地址的下一个扇区，GPT分区表备份通常都是起始于GPT磁盘分区区域结束地址的下一个扇区。 ⑫50H～53H。长度为4字节，表示分区表项的个数。Windows系统限定GPT分区个数为128，每个分区占用一个分区表项，所以该值为128。 ⑬54H～57H。长度为4字节，每个分区表项占用字节数，该值固定为128。 ⑭58H～5BH。长度为4字节，是分区表的CRC校验和。 ⑮5CH～1FFH。长度为420字节，保留不用。 分区表备份分区区域结束后，紧跟着就是分区表的备份，其地址在GPT头备份扇区中有描述。 分区表备份是对分区表32个扇区的完整备份。如果分区表被破坏，系统会自动读取分区表备份，也就能够保证正常地识别分区。 “GPT分区表备份起始扇区号”参数的值就是分区表备份所在的扇区号了。当前值为83,886,047，跳转到该扇区，看到的内容与GPT磁盘的2号扇区中分区表完全一样： Winhex 本身并没有提供GPT磁盘各数据结构的模板，文章中出现的模板为《数据恢复技术深度揭秘（第二版）》中随书附赠的光盘中所提供的。 U盘的工作模式HDD 模式将U盘模拟成硬盘模式，现在大多数U盘默认就是这个模式，该模式下多为 MBR 磁盘分区格式，也可以支持 GPT 分区。 在这个模式下，U盘的逻辑数据上与硬盘无差别，可以进行正常分区，支持多个分区（Windows 7及以下的版本无法在资源管理器访问多个分区）。 在 DiskGenius 中查看该模式下磁盘的图表为常规硬盘： 特别注意：如果选择了HDD模式，那么这个启动U盘启动后的盘符是C，在对启动分区进行操作时就容易产生很多问题，比如：装系统时安装程序会把启动文件写到U盘而不是你硬盘的启动分区！导致系统安装失败。所以请尽量先选择ZIP模式； FDD 模式将U盘模拟成软驱模式，这个模式下的分区类型为“无法分区的”磁盘，因为在底层情况下，0 扇区被替换为了分区的DBR。 用 Winhex 打开 FDD 模式下的 U盘（可以是虚拟分区），后可以看到 DBR 位于磁盘的 0 扇区。 在 DiskGenius 中可以看到该模式下磁盘的图标为 FDD 软驱： 这个模式的U盘在一些支持USB-FDD启动的机器上启动时会找不到U盘，所以请酌情使用； ZIP 模式将U盘模拟成 ZIP 驱动器模式，在底层情况下，这种模式使用的是 MBR 磁盘分区格式，其中首个分区的位置在磁盘的 32 号扇区。 在 DiskGenius 中查看该模式下磁盘的图标为 Zip Drive（极碟）： 另外如果U盘容量超过了256M，就只能用HDD模式，小于等于256M可以用ZIP模式。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"GPT","slug":"GPT","permalink":"https://blog.im0o.top/tags/GPT/"},{"name":"USB 工作模式","slug":"USB-工作模式","permalink":"https://blog.im0o.top/tags/USB-%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"}]},{"title":"使用Winhex进行数据恢复（9）","slug":"使用Winhex进行数据恢复（9）","date":"2021-12-03T02:18:21.000Z","updated":"2022-05-24T06:19:06.163Z","comments":true,"path":"posts/85e961fa.html","link":"","permalink":"https://blog.im0o.top/posts/85e961fa.html","excerpt":"","text":"前言本节将从底层分析 NTFS 删除文件前后的变化。 知识点总览 NTFS 删除文件的底层分析 NTFS 删除文件的底层分析本例中有一 NTFS 分区，该分区的参数如下图 文件删除前的底层分析分区中有两个文件 0.png 和 TextFile.txt 为例，文件如下图所示： 0.png 是一个图片文件，该文件的底层参数如下： 文件记录 文件的数据是由 80H 属性管理的，该文件的 80H 属性如下： 从80H属性中可以看出文件 0.png 的属性体是非常驻的，其 RunList 中只有一个数据流，所以文件是连续的。 数据区 TextFile.txt 是一个文本文件，打开后内容如图所示： 该文件的文件记录为： 从 80H 属性中可以看出，TextFile.txt 的属性体是常驻的。 80H 属性为数据属性，所以其属性体就是这个文件的数据。 文件删除后的底层分析为了了解文件删除后恢复的方法，先从文件系统级别了解一下文件删除时在NTFS文件系统中发生的变化。 查看了 0.png 和 TextFile.txt 文件的各部分结构后，现在把此文件彻底删除（不是放入回收站），然后再对其各部分结构进行分析，并讲解恢复的思路。 删除文件后，0.png 的文件记录如下图所示： 从图中可以看出 0.png 的文件记录的状态字节变为了 00 （文件被删除），而其他所有信息都没有被改变。 跳转到数据区后可以发现该文件的数据区没有改变。 TextFile.txt 的文件记录如下图所示： 查看 80H 属性体部分，可以发现文件内容没有被更改，只有状态字节变为了 00 （文件被删除）。 文件删除后的恢复将被删除的 0.png 文件的数据区的内容全部选中，并右键选块——编辑——复制选块——至新文件，将文件另存为新的文件，打开后可以看到文件的内容如下图所示： 很显然，这个文件就是被删除的 0.png。 80H 属性为常驻的文件删除后更容易恢复，跳转到 TextFile.txt 的文件记录，选中 80H 属性的属性体部分。 将这个选块另存为一个 txt 文件，打开之后就可以看到内容为原来的 TextFile.txt 文件内容：","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"NTFS","slug":"NTFS","permalink":"https://blog.im0o.top/tags/NTFS/"}]},{"title":"使用Winhex进行数据恢复（8）","slug":"使用Winhex进行数据恢复（8）","date":"2021-12-02T01:14:30.000Z","updated":"2022-05-24T06:19:06.165Z","comments":true,"path":"posts/3d55069f.html","link":"","permalink":"https://blog.im0o.top/posts/3d55069f.html","excerpt":"","text":"前言本篇将分析 NTFS 分区下常见的元文件与计算分区大小的多种方法。 你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件 知识点总览 NTFS 常见元文件分析 多种方法计算 NTFS 分区大小 实例：恢复丢失 DBR 的 NTFS 分区 实例：从 NTFS 分区提取文件 NTFS 常见元文件分析元文件 $MFTMirr$MFTMirr 是系统以恢复为目的创建的文件，其内容为元文件 $MFT 的前 4 项记录的备份。 在 NTFS 的每簇扇区数大于 4KB 时，那么 $MFTMirr 文件则备份 $MFT 前一个簇的文件记录，而且是按照文件记录的顺序进行备份的。 元文件 $BitMap元文件 $Bitmap 用来管理卷中簇的使用情况，在簇位图中，每个字节表示8位，对应8个簇（LCN）。 元文件 $LogFile日志文件的数据区由一系列 4KB 大小的日志记录组成，记录头的固定标识是 RCRD，其重启页的头部标志是 RSTR，位于重启区域的开始部分。 在文件被写到磁盘上时会在日志文件中更新文件系统有关的一些数据（如文件创建时间）。日志文件会记录这些操作的成功与失败，在系统故障后第一次进入磁盘时，系统读取日志文件并使其恢复到最后一次操作开始前的状态。恢复时间与磁盘大小无关，只与失败任务的复杂程度有关。 日志文件的数据区位置起始通常在 NTFS 分区的中间部分。 日志文件记录类型NTFS 文件系统会为以下事务写入更新记录： ① 创建文件 ② 删除文件 ③ 扩展（修改）文件 ④ 截断文件 ⑤ 设置文件信息 ⑥ 重命名文件 ⑦ 更改应用于文件的安全信息 日志文件的文件记录$LogFile 是 $MFT 中的第三个文件记录，其文件记录号为 02H。 多种方法计算 NTFS 分区大小通过 $LogFile 的文件位置计算 日志文件的数据区位置起始通常在 NTFS 分区的中间部分 所以我们可以通过计算出 $LogFile 相对于 DBR 的位置，再乘2，就能推断出该分区的大致大小。 计算方式：$LogFile的位置(扇区) * 2 = 分区的大致大小 通过 $BitMap 的文件记录计算根据簇位图表示分区大小，我们可以从 $BitMap 文件记录的 80H 属性中找到该文件的数据区大小 用 数据区大小（簇数）* 每簇扇区数 可以得到 数据区大小（扇区数） 用 数据区大小（扇区数）* 每扇区字节数（512） 可以得到 `数据区大小（字节数）`` 由于每个字节有8位，也就可以表示8个簇的使用情况，可以用 数据区大小（字节）* 8 可以得到 分区总簇数 用 分区大小（簇数） * 每簇扇区数 即可得出分区的扇区大小 通过 $BitMap 的数据区大小计算在文件记录被破坏等情况下，我们可以直接找到 $BitMap 的数据区，大致估算出数据区大小，再进行上述操作计算出分区大小。 实例：恢复丢失 DBR 的 NTFS 分区附加虚拟磁盘文件导入题目后可以从 计算机管理——磁盘管理 中看到该虚拟磁盘显示位“没有初始化”，其大小为 20GB，均未分配分区，可以初步判断该虚拟磁盘的 MBR（主引导扇区）损坏。 使用 Winhex 打开虚拟磁盘使用 Winhex 打开该虚拟磁盘后可以观察到，主引导扇区的分区表及结束标志损坏，故左上角的“分区类型”显示为?，首先填写位于最后两个字节的结束标志 55 AA 寻找分区从 1 扇区开始，使用快捷键 Ctrl+Alt+x 向下查找16进制数值!00（非零），可以查找到 B O O T M G R 字样，判断出这个扇区为 NTFS 分区中 $Boot 元文件的第二个扇区，第一个扇区即为 DBR。 记录下 DBR 的隐藏扇区数（位置）为 63 扇区。 计算分区大小通常情况下,$MFT 的位置位于该分区起始处向后偏移 786432 簇，每簇扇区数通常为 8 扇区/簇，换算成扇区数为 6291456 扇区。 本次计算使用“通过 $BitMap 的文件记录计算分区大小”方法。 向后跳转 6291456 个扇区，到达 $MFT。 已知 $BitMap 通常位于 6 号文件记录，每个文件记录占 2 个扇区。向后跳转 6*2=12 扇区，即可到达 $BitMap 的文件记录位置。 通过观察 80H 属性中的 RunList，可以得出： 该分区的 $BitMap 大小占 0xA0 个簇，换算成10进制为 160 个簇。 通过 (160 * 8 - 1) * 512 * 8 * 8 可计算出分区大小为 41,910,272 扇区。 寻找该分区的备份，修复 DBR使用快捷键 Ctrl + G 跳转到分区 DBR 位置（63扇区），再向后跳转 41,910,272 扇区，至该分区尾部。 由于计算分区大小时为了放置分区大小计算过大，通常会在 $BitMap 的扇区大小数 - 1 再进行后续的计算，这样计算出来的值会比实际分区大小略微小一点，不过不会影响数据恢复。 向下查找 !00，找到该分区的备份。 选中整个扇区（分区备份），复制粘贴至该分区的 DBR 位置。 填写 MBR跳转到 0 扇区后填写 MBR 的分区表。 NTFS 分区的标识为 07 该分区所在位置为 3F（63） 该分区的大小为 72 CB 7F 02（41,929,586） 保存更改后重新加载该磁盘保存后从 计算机管理——磁盘管理 处刷新该磁盘，可以看到该虚拟磁盘的分区恢复成功。 使用资源管理器打开分区后，文件显示正常。 至此，本题结束。 实例：从 NTFS 分区提取文件 本题目标文件为：site.png 附加虚拟磁盘文件导入题目后可以从 计算机管理——磁盘管理 中看到该虚拟磁盘显示位“没有初始化”，其大小为 20GB，均未分配分区，可以初步判断该虚拟磁盘的 MBR（主引导扇区）损坏。 使用 Winhex 打开虚拟磁盘 使用 Winhex 打开该虚拟磁盘何以观察到整个主引导扇区都为空，首先填写 MBR 的结束标志 55 AA，接着向下寻找分区。 寻找分区向下查找 16 进制数值 !00，如图所示，可以判断出该分区为 NTFS 分区。 分区位置为 63。 前往 $MFT，寻找文件向后跳转 6291456 扇区至元文件 $MFT。 使用快捷键 Ctrl+F 向下查找 Unicode 文本 site.png。 如图所示，该扇区为图片 site.png 的文件记录。 计算文件属性，恢复文件找到该文件记录的 80H 属性，其 RunList 值为 22 94 02 57 19 故该文件位置为 19 57H（簇），大小为 02 94H（簇）。 换算成 10 进制扇区数为： 文件位置：51896(簇) 文件大小：5280 从 DBR 处向后跳转 51896*8=415168 个扇区，到达文件数据区。 右键数据区开头，点击“选块起始位置”设定该位置为选块的起始。 向后跳转 5280 个扇区，到达文件数据末尾。 右键数据区末尾，点击“选块尾部”，建立选块。 右键选块，点击“编辑”——“复制选块”——“至新文件”，即可将文件手动恢复出来。 用资源管理器打开文件夹，即可看到该文件被恢复了出来。 至此，本题结束。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"NTFS","slug":"NTFS","permalink":"https://blog.im0o.top/tags/NTFS/"}]},{"title":"皮丘Bot - 基于 Pichubot 开发的定制化QQ机器人","slug":"皮丘Bot-基于-Pichubot-开发的定制化QQ机器人","date":"2021-11-26T02:07:52.000Z","updated":"2022-05-24T06:19:06.147Z","comments":true,"path":"posts/4701195e.html","link":"","permalink":"https://blog.im0o.top/posts/4701195e.html","excerpt":"","text":"前言这是基于 Pichubot 开发的QQ机器人，名为皮丘Bot。 文档地址：Pichubot - 皮丘Bot 功能：青年大学习管理系统这个功能共有三个模块，分别为： 网页面板 QQ群管理 网络API 网页面板 在这个模块中，皮丘Bot会提供一个简单的网页面板，用于管理青年大学习系统。 该模块有响应式布局，对手机端适配。 QQ群管理 在这个模块中，皮丘Bot会接收到群消息，并将消息解析处理，这个功能是皮丘Bot的核心功能。 网络API网页面板采用的是前后端分离的模式，这个模块是用于提供网络API的。 踩过的坑/笔记前端（Vue.js + Axios + elementui）前端面板采用的是 vue2 + axios + element-ui 进行开发，在开发过程中遇到了一些问题，比如： 在外部页面需要刷新内部组件的数据此处我将“成员列表”，写作一个组件，在“成员管理”页面中使用到了这个组件，但是在外部无法直接调用组件内的函数，也就无法做到重新加载列表内的表格。 解决方法在使用组件的时候给组件加上ref标签，通过调用this.$refs.内容.函数即可调用组件内的函数。 源码：123456789101112131415&lt;template&gt; ... &lt;memberTable ref=&quot;memberTable&quot; /&gt; ...&lt;/template&gt;&lt;script&gt; import memberTable from &#x27;@/components/membertable.vue&#x27; ... export default &#123; ... this.$refs.memberTable.getMemberList() ... &#125;&lt;/script&gt; axios 初始化拦截器由于 API 每次请求都需要 Bearer Token 以及配置请求地址，于是我在 src/ 目录下新建了一个 axios-init.js 文件用于初始化 axios 并输出。 以下为文件源码 src/axios-init.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import axios from &#x27;axios&#x27;import router from &#x27;@/router&#x27; //引入routerimport cookies from &#x27;vue-cookies&#x27;import &#123; Notification &#125; from &#x27;element-ui&#x27;;let instance = axios.create(); //创建Loading 的实例instance.defaults.baseURL = &quot;http://localhost/api/&quot;; // 配置axios请求的地址instance.defaults.headers.post[&#x27;Content-Type&#x27;] = &#x27;application/json; charset=utf-8&#x27;;axios.defaults.crossDomain = true;axios.defaults.withCredentials = true; //设置cross跨域 并设置访问权限 允许跨域携带cookie信息instance.defaults.headers.common[&#x27;Authorization&#x27;] = &#x27;&#x27;; // 设置请求头为 Authorization// 请求拦截器instance.interceptors.request.use( config =&gt; &#123; // 每次发送请求之前判断vuex中是否存在token const token = cookies.get(&#x27;token&#x27;); token &amp;&amp; (config.headers.Authorization = &#x27;Bearer &#x27;+ token); return config; &#125;, error =&gt; &#123; return Promise.error(error); // 抛出错误 &#125;);instance.interceptors.response.use( response =&gt; &#123; // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据 // 否则的话抛出错误 // 如果返回的状态码和body中的code不一致，说明接口请求失败，抛出错误 if (response.status === 200 &amp;&amp; response.data.code !== 200) &#123; switch (response.data.code) &#123; case 1001: cookies.remove(&#x27;token&#x27;); cookies.remove(&#x27;userId&#x27;); cookies.remove(&#x27;userName&#x27;); router.push(&#123;path: &#x27;/login&#x27;&#125;); Notification(&#123; title: &#x27;登录超时&#x27;, message: &#x27;请尝试重新登录&#x27;, type: &#x27;warning&#x27; &#125;); break; default: Notification(&#123; title: &#x27;提示&#x27;, message: response.data.message, type: &#x27;error&#x27; &#125;); &#125; return Promise.reject(response); &#125; else if (response.status === 200 &amp;&amp; response.data.code === 200) &#123; return Promise.resolve(response); &#125; &#125;, error =&gt; &#123; // 如果请求失败，返回错误 return Promise.reject(error); &#125;);export default instance src/main.js（引入 axios-init 中导出的 instance） 12import instance from &quot;./axios-init&quot;;Vue.prototype.$http = instance; 响应式布局下图为网页结构 响应式布局仅需设置 el-aside 与 headtable 的 display 属性即可。 1234567891011121314151617@media screen and (max-width: 768px) &#123; .asidemenu &#123; display: none; &#125; .headmenu &#123; display: visible; &#125;&#125;@media screen and (min-width: 768px) &#123; .asidemenu &#123; display: visible; &#125; .headmenu &#123; display: none; &#125;&#125; 后端（API、数据库操作部分）检测 Bearer token新建函数 verifyToken，传入 Header 中的 Authorization。 使用 strings.HasPrefix() 判断是否含有 token，将 token 与已有的 token 进行比对验证，通过后返回 true. 12345678func verifyToken(qq string, token string) bool &#123; if strings.HasPrefix(token, &quot;Bearer&quot;) &#123; if _, ok := Cookies[qq]; ok &amp;&amp; Cookies[qq] == token[7:] &#123; return true &#125; &#125; return false&#125; Golang 实现 16/32 位 MD5 加密12345678910111213141516171819202122232425package mainimport ( &quot;crypto/md5&quot; &quot;encoding/hex&quot; &quot;fmt&quot;)//返回一个32位md5加密后的字符串func GetMD5Encode(data string) string &#123; h := md5.New() h.Write([]byte(data)) return hex.EncodeToString(h.Sum(nil))&#125;//返回一个16位md5加密后的字符串func Get16MD5Encode(data string) string&#123; return GetMD5Encode(data)[8:24]&#125;func main() &#123; source:=&quot;hello&quot; fmt.Println(GetMD5Encode(source)) fmt.Println(Get16MD5Encode(source))&#125; Golang http 包下 FileServer 的使用12345// 将本地 &quot;/doc&quot; 路径下的文件绑定至 &quot;www.xxx.com/&quot; 下http.Handle(&quot;/&quot;, http.FileServer(http.Dir(&quot;./doc&quot;)))// 将本地 &quot;/doc&quot; 路径下的文件绑定至 &quot;www.xxx.com/abc/&quot; 下http.Handle(&quot;/abc/&quot;, http.StripPrefix(&quot;/abc&quot;, http.FileServer(http.Dir(&quot;./doc&quot;)))) Golang CORS 跨域请求在 http.ResponseWriter 中允许所有类型的请求，头，域名 123writer.Header().Set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;) //允许访问所有域writer.Header().Set(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;)writer.Header().Set(&quot;Access-Control-Allow-Headers&quot;, &quot;*&quot;) Golang 打包文件夹为 zip 压缩文件打包函数： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556func Zip(src_dir string, zip_file_name string) error &#123; dir, err := ioutil.ReadDir(src_dir) if err != nil &#123; logger.Log.Error(&quot;ioutil.ReadDir err:&quot; + err.Error()) return err &#125; if len(dir) == 0 &#123; logger.Log.Info(src_dir + &quot; is empty dir!&quot;) return nil &#125; // 预防：旧文件无法覆盖 os.RemoveAll(zip_file_name) // 创建：zip文件 zipfile, _ := os.Create(zip_file_name) defer zipfile.Close() // 打开：zip文件 archive := zip.NewWriter(zipfile) defer archive.Close() // 遍历路径信息 filepath.Walk(src_dir, func(path string, info os.FileInfo, _ error) error &#123; // 如果是源路径，提前进行下一个遍历 if path == src_dir &#123; return nil &#125; // 获取：文件头信息 header, _ := zip.FileInfoHeader(info) header.Name = strings.TrimPrefix(path, src_dir+`\\`) // 判断：文件是不是文件夹 if info.IsDir() &#123; header.Name += `/` &#125; else &#123; // 设置：zip的文件压缩算法 header.Method = zip.Deflate &#125; // 创建：压缩包头部信息 writer, _ := archive.CreateHeader(header) if !info.IsDir() &#123; file, _ := os.Open(path) defer file.Close() io.Copy(writer, file) &#125; return nil &#125;) return nil&#125; 需要注意的是：在传入字符串时的路径最好使用 filepath.Join 进行操作，直接使用字符串可能会造成打包错误的问题, zipfile 需要加上扩展名 Golang GORM 根据结构体结构建指定名字的表1234567891011121314// 结构体type user struct &#123; QQ int64 `json:&quot;qq&quot;` Name string `json:&quot;name&quot;` Comp int `json:&quot;comptype&quot;` Url string `json:&quot;url,omitempty&quot;`&#125;// gorm 新建一个user结构的表// database 为 *gorm.DB 类型func createTable(groupId string) error &#123; err := database.Table(groupId).Migrator().CreateTable(&amp;user&#123;&#125;) return err&#125; VuePress 文档部署文档后样式丢失将 docs/.vuepress/config.js 中的 base 字段由绝对地址 / 改为相对地址 ./ 即可 在 VuePress 中使用 element-ui在 docs/.vuepress/ 目录下新建文件 enhanceApp.js 12345678import Vue from &#x27;vue&#x27;;import VueRouter from &#x27;vue-router&#x27;;import Element from &#x27;element-ui&#x27;;import &#x27;element-ui/lib/theme-chalk/index.css&#x27;// import ViewUI from &#x27;view-design&#x27;;// import &#x27;view-design/dist/styles/iview.css&#x27;;Vue.use(VueRouter);Vue.use(Element); 使用包管理安装对应的包（vue，element-ui）即可。 让 Vuepress 支持图片放大功能使用包管理安装插件 @vuepress/plugin-medium-zoom 12yarn add -D @vuepress/plugin-medium-zoom# OR npm install -D @vuepress/plugin-medium-zoom 在 docs/.vuepress/config.js 中添加 123module.exports = &#123; plugins: [&quot;@vuepress/medium-zoom&quot;]&#125;","raw":null,"content":null,"categories":[{"name":"杂谈/踩坑笔记","slug":"杂谈-踩坑笔记","permalink":"https://blog.im0o.top/categories/%E6%9D%82%E8%B0%88-%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"go","slug":"go","permalink":"https://blog.im0o.top/tags/go/"},{"name":"Pichubot","slug":"Pichubot","permalink":"https://blog.im0o.top/tags/Pichubot/"},{"name":"QQ机器人","slug":"QQ机器人","permalink":"https://blog.im0o.top/tags/QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/"}]},{"title":"使用Winhex进行数据恢复（7）","slug":"使用Winhex进行数据恢复（7）","date":"2021-11-22T10:26:30.000Z","updated":"2022-05-24T06:19:06.166Z","comments":true,"path":"posts/653616c9.html","link":"","permalink":"https://blog.im0o.top/posts/653616c9.html","excerpt":"","text":"前言本篇将了解到 NTFS 分区结构下文件记录中常见的属性，以及属性的结构。 知识点总览 NTFS 文件记录的常见属性 各类文件/文件夹的常用属性 各项属性详解 10H 属性 30H 属性 80H 属性 90H 属性 A0H 属性 B0H 属性 NTFS 文件记录的常见属性在 NTFS 分区下的文件或文件夹的文件记录中，经常使用的属性有： 10H 属性（标准信息） 30H 属性（文件名属性） 80H 属性（$DATA 属性） 90H 属性（文件夹/根 索引属性） A0H 属性（索引分配属性） B0H 属性（位图属性） 各类文件/文件夹的常用属性文件的文件记录经常使用的属性 10H 属性（标准信息） 30H 属性（文件名属性） 80H 属性（$DATA 属性） 小文件夹的常用属性 10H 属性（标准信息） 30H 属性（文件名属性） 90H 属性（文件夹/根 索引属性） 大文件夹的常用属性 10H 属性（标准信息） 30H 属性（文件名属性） 90H 属性（文件夹/根 索引属性） A0H 属性（索引分配属性） B0H 属性（位图属性） 特殊情况有些小文件夹也有可能有 A0H 属性和 B0H 属性，这是因为这类文件夹往往是小文件夹变成大文件夹后再变为小文件夹产生的。（即用户将文件夹中的文件删除后，文件夹中的剩余文件数量非常少（甚至是空的）而形成的小文件夹） 各项属性详解10H 属性10H 属性的类名为 $STANDARD_INFORMATION（标准信息），是所有文件记录或文件夹都具有的常驻属性，它包含了文件或文件夹的基本信息。例如：日期、时间、有多少个目录指向文件或文件夹等。 这个属性一般位于属性头之后的第一个属性，偏移地址通常为 38H。 30H 属性30H 属性一般紧跟 10H 属性之后。30H 属性属于常驻无属性名属性，用于存储文件名。其大小为 68~578 字节（文件名最大为 255 个 Unicode 字符），如果一个文件或文件夹的名字超过8个字符时，在文件记录中就会有两个 30H 属性，一个 30H 属性描述的是短文件名，另一个描述的则是长文件名。 80H 属性80H 属性即 $DATA 属性，80H 属性主要用于存储文件。该属性一般情况下可分为三种结构： 有属性头而无属性体 常驻无属性名 非常驻无属性 有属性头无属性体这种属性主要针对没有内容（0字节）的文本文件的情况。 常驻无属性名80H 常驻无属性名分为 80H 属性头和 80H 属性体（即文件内容）两部分。文件内容的长度为8的倍数，当文件内容结束时并没有达到8的倍数时，多余的字节用 00 来填充。 字节偏移 长度/字节 含义 00H 4 属性类型（80H，对象ID属性） 04H 4 该属性长度（包括文件属性头头部本身） 08H 1 是否为常驻标志，此处为00，表示常驻 09H 1 属性名的名称长度，00表示没有属性名 0AH 2 属性名的名称偏移 0CH 2 标准（压缩、加密、稀疏等） 0EH 2 属性ID标识 010H 4 属性体长度（L） 014H 2 属性内容起始偏移 016H 1 索引标志 017H 1 填充 018H L 文件内容 非常驻无属性名非常驻的属性一般以数据流（Run List）的形式表示，此处以一个 $LogFile 文件的 80H 属性进行分析，具体的数据流列表如下： 32 98 1B A6 C8 03 这个数据流的具体含义如下： 该属性共有 1 个数据流列表 这个数据流列表占 6 字节，即32 98 1B A6 C8 03，数值32表示该数据流列表的起始簇号占 3 字节，簇数占 1 字节；即该数据流列表起始簇号为 0x03C8A6（即 247974），共占 0x1B98（即 7064）个簇。 数据流（数据运行列）80H 属性下的第一个未命名数据流也就是文件真正的数据，由 Data Run 来记录其属性体（即文件数据）的具体位置。 结构含义 对应关系 计算方式通过数据流计算出文件的位置与大小（此处以上图的数据进行计算） 通过解析数据流，我们知道了该文件的位置大小信息为下表： 此处每簇扇区数定义为 8 （扇区/簇） 簇数（16进制） 簇数（10进制） 扇区数 位置（隐藏扇区数） 03 C8 A6 247974 1983792 大小 1B 98 7064 56512 有了文件的位置与大小参数，即可从 NTFS 的 DBR 处向后跳转 1983792 扇区 （隐藏扇区数），选中个 56512 扇区（文件大小），即可复制选块至新文件，从底层恢复该文件。 90H 属性90H 属性即 $INDEX_ROOT，是索引根属性，该属性是实现 NTFS 的 B+ 树索引的根节点，它总是常驻属性。 该属性没有最大最小长度性质，属性结构如下： 标准属性头 索引根 索引头 索引项 索引项 ... 索引根 字节偏移 字段长度（字节） 描述 ～ ～ 标准属性头（已分析过） 0x00 4 属性类型 0x04 4 校对规则 0x08 4 每个索引缓冲区的分配大小（字节数） 0x0C 1 每个索引缓冲区的簇数 0x0D 3 无意义（填充到属性长度能被8整除） 索引头 字节偏移 字段长度（字节） 描述 0x00 4 第一个索引项的偏移 0x04 4 索引项的总大小 0x08 4 索引项的分配大小 0x0C 1 标志：当该字节为00时，表示其为小索引（适合于索引根）；当该字节为01时，表示其为大索引（适合于索引分配） 0x0D 3 无意义（填充到属性长度能被8整除） 索引项索引头后面有着不同长度的索引项的序列，由一个带有最后一个索引项标志的特殊索引项来结束。当一个目录比较小，可以全部存储在索引根属性中时，该目录就只需要这一个属性来描述。而如果目录太大不能全部存储在索引根中时，就会有两个附加的属性出现：一个是索引分配属性，描述B＋树目录的子节点；另一个是索引位图属性，描述索引块的索引分配属性使用的虚拟簇号。根目录$Root包含它自身的一个索引项。 索引项描述 字节偏移 字段长度（字节） 描述 0x00 8 该文件的MFT参考号 0x08 2 索引项的大小（相对索引项开始的偏移） 0x0A 2 文件名属性体大小 0x0C 2 索引标志：此处为1表示这个索引项包含子节点；为2表示这是最后一个项 0x0E 2 用0填充，无意义 0x10 8 父目录的MFT文件参考号 0x18 8 文件创建时间 0x20 8 文件最后修改时间 0x28 8 文件记录最后修改时间 0x30 8 文件最后访问时间 0x38 8 文件的分配大小 0x40 8 文件的实际大小 0x48 8 文件标志 0x50 1 文件名的长度 0x51 1 文件名的命名空间 0x52 2F 文件名 2F＋0x52 P 填充到能被8整除（无意义） P＋2F＋0x52 8 子节点的索引所在的VCN（需要有子节点时才有） A0H 属性A0H 类型属性，即 INDEX_ALLOCATION，它是索引分配属性，也是一个索引（如目录）的基本结构，存储着组成索引的B＋树目录所有子节点的定位信息。它总是非常驻属性，没有最大最小值限制。 A0H属性结构描述： 字节偏移 字段长度（字节） 描述 ~ ~ 标准属性头（已分析过） 0x00 … Data Run列表 A0H属性的Run List所描述的数据流，也就是NTFS的B＋树结构的索引缓冲区。 B0H 属性B0H 类型属性即 $BITMAP，也就是位图属性，该属性是由一系列的位构成的虚拟簇（VCN）使用情况表，它没有最大最小限制。该属性目前用在两个地方：索引和 $MFT 中。在索引中，每一位代表索引分配中的一个 VCN；在 $MFT 中，每一位代表一个文件记录的使用情况。 下图为一个 $MFT 自带的 B0H 属性 上图中 B0H 属性的 Run List 所描述的数据流，就是 $MFT 的文件记录使用情况表。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"NTFS","slug":"NTFS","permalink":"https://blog.im0o.top/tags/NTFS/"}]},{"title":"使用Winhex进行数据恢复（6）","slug":"使用Winhex进行数据恢复（6）","date":"2021-11-21T10:59:34.000Z","updated":"2022-05-24T06:19:06.166Z","comments":true,"path":"posts/dd8a71ac.html","link":"","permalink":"https://blog.im0o.top/posts/dd8a71ac.html","excerpt":"","text":"前言本篇将继续学习 NTFS 分区结构下的文件记录结构。 知识点总览 NTFS 分区结构文件记录分析 NTFS 文件记录头的结构 NTFS 文件记录中属性的结构 NTFS 分区结构文件记录的分析文件记录的结构$MFT 以文件记录来实现对文件的管理，相对于 FAT32 分区结构以 32 字节储存每条文件记录，NTFS 分区结构的文件记录大小固定为 1024 字节，也就是两个扇区。 如果一个文件有很多属性或者是分散成很多碎片，就很可能需要多个文件记录。此时，存放其文件记录的第一个记录就被称为“基本文件记录”。文件记录在 $MFT 中物理上是连续的，从 0 开始依次按顺序编号。 文件记录由两部分组成，一部分是文件记录头，另一部分是属性列表。 文件属性结构表： 文件记录头的结构文件记录头的长度和具体偏移位置的数据含义是不变的，而属性列表是可变的，其不同的属性有着不同的含义。 NTFS 文件记录头的信息： 字节偏移 字段长度（字节） 字段名和含义 0x00 4 MFT标志，一定为字符串“FILE” 0x04 2 更新序列号（Update Sequence Number）的偏移 0x06 2 更新序列号的大小与数组，包括第一个字节 0x08 8 日志文件序列号（$LogFile Sequence Number，LSN） 0x10 2 序列号（Sequence Number） 0x12 2 硬连接数（Hard Link Count），即有多少目录指向该文件 0x14 2 第一个属性的偏移地址 0x16 2 标志（Flag），00H表示文件被删除，01H表示文件正在使用，02H表示目录被删除，03H表示目录正在使用 0x18 4 文件记录的实际长度 0x1C 4 文件记录的分配长度 0x20 8 基本文件记录中的文件索引号 0x28 2 下一属性ID，当增加新的属性时，将该值分配给新属性，然后该值增加，如果MFT记录重新使用，则将它置0，第一个实例总是0 0x2A 2 边界，Windows XP中为偏移0x30处 0x2C 4 文件记录号 0x30 2 更新序列号 0x32 4 更新数组 偏移00H～03H为MFT的标志字符串，它总为“FILE”。 每次记录被修改都将导致偏移08H～09H处的日志文件序列号$LogFile Sequence Number（LSN）发生变化。 偏移10H～11H处序列号Sequence Number（SN）用于记录主文件表记录被重复使用的次数。 偏移12H～13H处为硬连接数记录硬连接的数目，只出现在基本文件记录中。 偏移18H～1BH处文件记录的实际长度也即文件记录在磁盘上实际占用的字节空间。 偏移1CH～1FH为系统分配给文件记录的长度，一般为“00 04 00 00”，也就是1KB的长度。 偏移20H～27H处为基本文件记录中的文件索引号，基本文件记录在此的值总为0。如果不为0，则是一个主文件表的文件索引号，指向所属的基本文件记录中的文件记录号。在基本文件记录中包含有扩展文件记录的信息，存储在“属性列表ATTRIBUTE_LIST”属性中。 偏移2CH～2FH处为文件记录编号，从0开始编号。 偏移30H～31H处为更新序列号，这两个字节同时会出现在该文件记录第一个扇区最后两个字节处及该文件记录第二个扇区最后两个字节处，如下图所示。 偏移32H～35H处为更新数组，这4个字节很重要，它的作用如下： 因为上述的“更新序列号”的两个字节同时会出现在该文件记录第一个扇区最后两个字节处及该文件记录第二个扇区最后两个字节处，也就是事先占用了文件记录的4个字节，当文件记录中的信息需要往这4个字节处写入时，就跳转到了32H～35H处来写。 具体对应关系是：文件记录第一个扇区最后两个字节对应32H～33H处，文件记录第二个扇区最后两个字节对应34H～35H处 当信息还没有写入该文件记录第一个扇区最后两个字节处及该文件记录第二个扇区最后两个字节处时，更新数组处的4个字节就为0。 文件记录中属性的结构属性的类型文件记录由两部分构成，一部分是文件记录头，另一部分是属性列表。在 NTFS 文件系统中所有与文件相关的数据均被认为是属性，包括文件的内容。文件记录是一个文件相对应的文件属性数据库，它记录了文件数据的所有属性。 每个文件记录中都有多个属性，它们相对独立，它们相对独立，有各自的类型和名称。一个属性开头的4个字节，为该属性的类型标志，不同的属性其结构和含义各不相同，下表为所有属性的类型和含义。 属性类型（Little-Endian） 属性类型名 属性描述 10 00 00 00 $STANDARD_INFORMATION 标准信息：包括一些基本文件属性，如只读、系统、存档；时间属性，如文件的创建时间和最后修改时间；有多少目录指向该文件（即其硬连接数（hard link count）） 20 00 00 00 $ATTRIBUTE_LIST 属性列表：当一个文件需要多个文件记录时，用来描述文件的属性列表 30 00 00 00 $FILE_NAME 文件名：用Unicode字符表示的文件名，由于MS-DOS不能识别长文件名，所以NTFS系统会自动生成一个8.3文件名 40 00 00 00 $VOLUME_VERSION 在早期的NTFS v1.2中为卷版本 40 00 00 00 $OBJECT_ID 对象ID：一个具有64字节的标识符，其中最低的16字节对卷来说是唯一的（链接跟踪服务为外壳快捷方式，即OLE链接源文件赋予对象ID；NTFS提供的API是直接通过这些对象的ID而不是文件名来打开文件的） 50 00 00 00 $SECURITY_DESCRIPTOR 安全描述符：这是为向后兼容而保留的，主要用于保护文件以防止没有授权的访问，但Windows 2000/XP中已将安全描述符存放在$Secure元数据中，以便于共享（早期的NTFS将其与文件目录一起存放，不便于共享） 60 00 00 00 $VOLUME_NAME 卷名（卷标识）：该属性仅存在于$Volume元文件中 70 00 00 00 $VOLUME_INFORMATION 卷信息：该属性仅存在于$Volume元文件中 80 00 00 00 $DATA 文件数据：该属性为文件的数据内容 90 00 00 00 $INDEX_ROOT 索引根 A0 00 00 00 $INDEX_ALLOCATION 索引分配 B0 00 00 00 $BITMAP 位图 C0 00 00 00 $SYMBOLIC_LINK 在早期的NTFS v1.2中为符号链接 C0 00 00 00 $REPARSE_POINT 重解析点 D0 00 00 00 $EA_INFORMATION 扩充属性信息 E0 00 00 00 $EA 扩充属性 F0 00 00 00 $PROPERTY_SET 早期的NTFS v1.2中才有 00 10 00 00 $LOGGED_UTILITY_STREAM EFS加密属性：该属性主要用于存储实现EFS加密的有关加密信息，如合法用户列表、解码密钥等 需要注意的是，上表中不是所有属性都会在一个文件记录中出现，属性有常驻和非常驻之分。当一个文件很小时，它的所有属性体都可以存放在$MFT的文件记录中，该属性就称为常驻属性。 有些属性总是常驻的，这样NTFS才可以确定其他非常驻属性，例如：标准信息属性和根索引属性就是常驻属性。 如果属性体能直接存放在$MFT中，那么访问该文件所需的时间将大大缩短，系统只需要访问磁盘一次即可获得数据；也就是文件的数据直接存放在文件记录的 $DATA 属性中（如果这个文件的数据大小+属性大小小于1KB的话）。 属性的结构每一个属性都可以分为两个部分，属性头和属性体。 属性头每一个属性都有一个属性头，这个属性头包含了该属性的基本信息： 属性类型 属性大小 属性名字（不是一定有的） 是否为常驻属性 以下为常驻属性和非常驻属性的结构 常驻属性： 字节偏移 字段长度（字节） 含义 0x00 4 属性类型（如90H、B0H等类型） 0x04 4 包括属性头在内的本属性的长度（字节） 0x08 1 是否为常驻属性（00表示常驻，01H表示非常驻） 0x09 1 属性名长度（N） 0x0A 2 属性名开始的偏移 0x0C 2 压缩、加密、稀疏标志 0x0E 2 属性ID 0x10 4 属性体的长度（L） 0x14 2 属性体的开始偏移 0x16 1 索引标志 0x17 1 无意义 0x18 2N 属性的名字（如果没有名字 N=0，则该位置为属性体的内容） 2N＋0x18 L 属性体的内容 非常驻属性 字节偏移 字段长度（字节） 含义 0x00 4 属性类型（如80H、A0H等类型） 0x04 4 包括属性头在内的本属性的长度（字节） 0x08 1 是否为常驻属性（为01表示该属性为非常驻属性） 0x09 1 属性名长度（N） 0x0A 2 属性名开始的偏移 0x0C 2 压缩、加密、稀疏标志 0x0E 2 属性ID 0x10 8 属性体的起始虚拟簇号（VCN） 0x18 8 属性体的结束虚拟簇号 0x20 2 Run List（Run即Data Run，是一个在逻辑簇号上连续的区域，它是不存储在MFT中的数据）信息的偏移地址 0x22 2 压缩单位大小（2x簇，如果为0表示未压缩） 0x24 4 无意义 0x28 8 属性体的分配大小［该属性体占的大小，这个属性体大小是该属性体所有的簇所占的空间大小（字节）］ 0x30 8 属性体的实际大小（因为属性体长度不一定正好占满所有簇） 0x38 8 属性体的初始大小 0x40 2N 该属性的属性名（如果没有名字 N=0，则该位置为属性体的内容） 2N＋0x40 属性的Run List信息，它记录了属性体开始的簇号、簇数等信息","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"NTFS","slug":"NTFS","permalink":"https://blog.im0o.top/tags/NTFS/"}]},{"title":"使用Winhex进行数据恢复（索引）","slug":"使用Winhex进行数据恢复（索引）","date":"2021-11-21T10:39:53.000Z","updated":"2022-05-24T06:19:06.165Z","comments":true,"path":"posts/1aa64c01.html","link":"","permalink":"https://blog.im0o.top/posts/1aa64c01.html","excerpt":"","text":"前言本篇将以知识点的形式对所有的数据恢复教程文章进行索引，以便于更快的查找。 直接点击对应的标题即可访问其页面。 索引(0)Winhex 数据恢复题库介绍 点击直接打开题库 (1)学习 Winhex 软件的用法 介绍 Winehex Winhex 的常用快捷键 MBR 主引导记录 Windows 系统的常用分区简述 (2)学习 MBR 的恢复方法，了解分区结构 Winhex 窗口使用介绍 实例：填写MBR 什么是 DBR 主分区与扩展分区 (3)学习 FAT32 分区结构，手工恢复分区 FAT32分区构成 实例：导出损坏分区FAT32中的文件 实例：恢复FAT32分区（手动填写FAT32分区的DBR） EBR的组成 (4)学习从底层方法恢复 FAT32 分区中的文件 FAT32 文件系统删除文件的分析 FAT32 文件系统删除文件后目录项起始簇号高位清零的分析 实例：恢复 FAT32 中被删除的文件 (5)初步了解 NTFS 分区结构，手工恢复 NTFS 分区的DBR NTFS 文件系统的大致结构 NTFS 文件系统的 DBR 恢复 NTFS 文件系统的元文件 $MFT (6)学习 NTFS 分区的文件记录结构和其中属性的大致结构 NTFS 分区结构文件记录分析 NTFS 文件记录头的结构 NTFS 文件记录中属性的结构 (7)学习 NTFS 分区的常见属性的详细结构 NTFS 文件记录的常见属性 各类文件/文件夹的常用属性 各项属性详解 10H 属性 30H 属性 80H 属性 90H 属性 A0H 属性 B0H 属性 (8)计算 NTFS 分区大小，从底层提取文件 NTFS 常见元文件分析 多种方法计算 NTFS 分区大小 实例：恢复丢失 DBR 的 NTFS 分区 实例：从 NTFS 分区提取文件 (9)NTFS 删除文件的底层分析 NTFS 删除文件的底层分析 (10)GPT 磁盘分区，USB 的工作模式 GPT 磁盘分区的特点 GPT 磁盘分区的结构 U盘 的工作模式 HDD 模式 FDD 模式 ZIP 模式 (11)exFAT 分区的基本结构和特点 exFAT 文件系统的特点 exFAT 文件系统的结构 exFAT 文件系统的 DBR 分析 (12)exFAT 文件系统的 FAT 表、簇位图、目录结构 exFAT 分区 FAT 表结构 exFAT 分区 Bitmap 结构 exFAT 分区大写字符文件结构 exFAT 分区目录结构 (13)恢复 exFAT 分区的 DBR、文件 实例：恢复丢失 DBR 的 exFAT 分区 实例：从 exFAT 分区中提取文件","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"}]},{"title":"使用 Vercel + github 部署 hexo 博客","slug":"使用vercel-github部署hexo博客","date":"2021-11-15T12:43:53.000Z","updated":"2022-05-24T06:19:06.175Z","comments":true,"path":"posts/2ace8b97.html","link":"","permalink":"https://blog.im0o.top/posts/2ace8b97.html","excerpt":"","text":"写在前面本站已迁移至 Vercel 页面托管服务，博客链接更新为 blog.im0o.top。 什么是 VercelVercel 类似于 github page，但远比 github page 强大，速度也快得多得多，而且将 Github 授权给 Vercel 后，可以达到最优雅的发布体验，只需将代码轻轻一推，项目就自动更新部署了。 这意味着，你无需配置繁琐的 Github Actions，只需要将代码推送至你的仓库（可以是私有的），Vercel 会自动克隆代码并按照设定的方式部署。 什么是 HexoHexo 是一个基于 Node.js 的博客框架，它可以轻松地创建博客，并且支持 Markdown 语法。 准备工作在开始部署之前，需要先安装 Node.js、Git、yarn(如果需要)、hexo，并且拥有一个有效的 Github 账户。 如果你使用的是 Windows 系统，需要安装 Git for Windows。 安装 Node.js你可以通过以下方式安装 Node.js： 官方安装方式 直接下载安装 Node.js。 使用 scoop 包管理器安装 Node.js 如果你使用 scoop 包管理器，需要先安装 scoop 包管理器，然后在命令行中执行 scoop install nodejs 命令即可。 使用其他包管理器安装 Node.js 安装 Hexo你可以参考 文档 | Hexo 中的步骤进行安装。 使用以下指令，即可通过 Yarn 包管理，进行全局安装 hexo 脚手架。 1234# Yarnyarn global add hexo-cli# Npmnpm install hexo-cli -g 以下为安装日志，安装成功后使用 hexo -v 即可查看安装好的 hexo-cli 的版本。 12345678910111213141516171819202122232425262728293031PS -&gt;yarn global add hexo-cliyarn global v1.22.17[1/4] Resolving packages...[2/4] Fetching packages...[3/4] Linking dependencies...[4/4] Building fresh packages...success Installed &quot;hexo-cli@4.3.0&quot; with binaries: - hexoDone in 11.01s.PS -&gt;hexo -vhexo-cli: 4.3.0os: win32 10.0.19041node: 16.13.0v8: 9.4.146.19-node.13uv: 1.42.0zlib: 1.2.11brotli: 1.0.9ares: 1.17.2modules: 93nghttp2: 1.45.1napi: 8llhttp: 6.0.4openssl: 1.1.1l+quiccldr: 39.0icu: 69.1tz: 2021aunicode: 13.0ngtcp2: 0.1.0-DEVnghttp3: 0.1.0-DEV 初始化 Hexo 项目新建一个文件夹，用于存放你 Hexo 博客的所有内容。 输入以下指令，初始化该文件夹为一个 Hexo 博客项目。 首先使用 git init 将其初始化为一个 Git 项目，便于后续上传到仓库进行自动构建。 12PS &gt; git initPS &gt; hexo init 你可以使用指令 hexo s 或 hexo server 在本地运行你的博客，默认地址为 localhost:4000 ，用浏览器打开即可看到你的博客，与一篇默认的 Hello World 文章。 本篇的重点不在搭建 Hexo 博客上，与本地的 Hexo 有关内容到此结束 新建 Github 仓库新建一个 Github 仓库，用于存放博客源码，这个仓库可以是私有（Private）的，也可以是公开（public）的。 将本地博客 push 到你刚刚新建的 Github 仓库中。 12345PS &gt; git add .PS &gt; git commit -m &quot;first commit&quot;PS &gt; git branch -M mainPS &gt; git remote add origin https://github.com/你的仓库地址.gitPS &gt; git push -u origin main 部署好后即可在仓库中看到你的 hexo 源码 将源码部署至 Vercel从 Login – Vercel 登录你的 Vercel（推荐选择 Continue with Github，使用 Github 登录） 点击 dashboard 中的 New Project 即可新建一个 Vercel 项目。 你可以在这里看到你最近新建的仓库，点击仓库右边的 Import 按钮，导入仓库至 Vercel。 Vercel 自动识别了这个仓库是一个 Hexo 项目，如果你没有对你的 Hexo 项目做更改，可以直接使用默认配置，直接点击 Deploy 按钮部署。 成功部署后的页面如下。 点击 Go to Dashboard，即可前往该项目的控制面板。 DOMAINS 下的链接即为你的博客的访问链接，左边为该网站的预览图片。 解析域名至 Vercel你可以点击 Vercel 项目中的 Settings -&gt; Domains，将你的域名解析至 Vercel 部署的网页上。 输入你的域名（可以是二级域名）后点击右方的 Add 按钮，即可绑定域名至该项目. 此时，页面提示了 Invaild Configuration，原因是域名没有解析至 Vercel。 推荐使用 CNAME 记录进行解析。 按图中样式，添加一个 CNAME 记录，记录名为 testblogproject（本例为这个），记录值为 cname.Vercel-dns.com。 如果是 CloudFlare DNS，不要使用 CF 代理（因为 Vercel 本身速度足够快了，如果用 CF 代理，访问速度反而会变慢）。 保存后刷新 Dashboard-Settings-Domains 页面，你可以看到该域名不再报错，且正在生成 SSL证书。 访问 testblogproject.im0o.top，看到先前测试时的页面，证明部署成功了。 更新博客内容以后更新博客，只需要在本地写好内容，将代码推到 Github 仓库，Vercel 会自动编译部署最新的代码（在默认分支）。","raw":null,"content":null,"categories":[{"name":"一些教程","slug":"一些教程","permalink":"https://blog.im0o.top/categories/%E4%B8%80%E4%BA%9B%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.im0o.top/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://blog.im0o.top/tags/Github/"},{"name":"Vercel","slug":"Vercel","permalink":"https://blog.im0o.top/tags/Vercel/"}]},{"title":"ClipboardBypass - 绕过超星学习通粘贴限制","slug":"绕过超星学习通","date":"2021-11-02T02:07:17.000Z","updated":"2022-05-24T06:19:06.124Z","comments":true,"path":"posts/b84fa704.html","link":"","permalink":"https://blog.im0o.top/posts/b84fa704.html","excerpt":"","text":"前言在网页版超星学习通中进行答题时，填空题被限制不允许从剪贴板粘贴，防止关闭 Javascript 会影响到其他功能，于是使用 AutoHotKey 编写了一个简单的粘贴脚本 图片 效果在使用快捷键 Ctrl+V 粘贴时，将以键入形式逐字输出剪贴板内复制的文本 该功能仅替换 Ctrl+V 快捷键，且不支持文字以外的数据 但不替换 右键-粘贴 方式进行粘贴。 下载国内加速下载 | 全球加速下载 | Dropbox 原理 ClipBoardBypass 按下 Ctrl + V 时 （以键入形式）输出剪贴板的内容 源码123MsgBox, 64, Little Tool, 绕过网页版学习通阻止剪贴板功能开启`n尝试直接复制粘贴数据即可`n注意：不支持粘贴图片^v::Send %clipboard%","raw":null,"content":null,"categories":[],"tags":[]},{"title":"使用Winhex进行数据恢复（5）","slug":"使用Winhex进行数据恢复（5）","date":"2021-10-27T00:49:08.000Z","updated":"2022-05-24T06:19:06.166Z","comments":true,"path":"posts/cf3fde42.html","link":"","permalink":"https://blog.im0o.top/posts/cf3fde42.html","excerpt":"","text":"前言本节我们将了解 NTFS 格式分区的结构、引导扇区、以及元文件 $MFT。 你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件 知识点总览 NTFS 文件系统的大致结构 NTFS 文件系统的 DBR 恢复 NTFS 文件系统的元文件 $MFT NTFS 文件系统的结构概述NTFS 文件系统与 FAT32 文件系统一样，都是以簇为基本单位对磁盘空间和文件存储进行管理。一个文件总是占有若干个簇，即使在最后一个簇没有完全使用完的情况下，也会占用整个簇的空间。 这也能解释为何文件的占用空间总是大于文件大小，也是造成磁盘空间浪费的主要原因。 文件系统通过簇来管理磁盘，并不需要知道磁盘扇区的大小，这样就使 NTFS 保持了与磁盘扇区大小的独立性，从而使不同大小的磁盘选择合适的簇。 簇的大小与卷大小的关系在 NTFS 文件系统中，当一个簇占用的空间太小时，会出现太多的磁盘碎片，这样在空间和访问文件的时间会造成浪费；而相反的当一个簇占用的空间太大时，直接造成了磁盘空间的浪费。因此，最大限度地优化系统对文件的访问速度和最大限度地减少磁盘地浪费是确定簇大小地主要因素。簇地大小一定是扇区大小地整数倍，通常是 2^n（n为整数）。 下表为 NTFS 文件系统中不同卷地大小和簇地一般关系（大都数情况下都是这样，并不是完全一定的，为系统格式化磁盘地默认情况） 卷大小（MB） 每簇扇区数 默认簇大小 ≤512 1 512字节 513~1024 2 1024字节（1KB） 1025~2048 4 2048个字节（2KB） ≥2049 8 4KB 通常情况下，只要分区大于2GB，每簇扇区数为 8 DBR 引导扇区和 FAT 文件系统一样，NTFS 的第一个扇区为引导扇区，即 DBR 扇区。其中有 NTFS 分区的引导程序和一些 BPB 参数，系统根据这些 BPB 参数来得到分区的重要信息。如果没有这些信息，分区将不能正常使用。 $BOOT 文件在 DBR 后15个扇区为 NTLDR 区域，这16个扇区共同构成了 $BOOT 文件。 $MFT 文件在 NTLDR 后（不一定是物理上相连的）是主文件表（Master File Table，MFT）区域，主文件表由文件记录构成，每个文件记录占2个扇区，文件记录简称为FR（File Record）。 在 NTFS 文件系统中，文件名、扩展名、建立时间、访问时间、修改时间、文件属性、文件大小、文件在磁盘中所占用的簇等信息称之为属性，各种属性被放入文件记录中进行管理。当一个属性太大，文件记录中存放不下时，就会分配多个文件记录进行存放；而当一个文件非常小时，可能这个文件的所有属性都包含在一个文件记录中了，甚至包括了这个文件的数据，这样做的好处是节约了磁盘空间并提高了文件访问效率。 其他元文件NTFS 文件系统中的主文件表（$MFT）中还记录了一些非常重要的数据，这些数据被称为元数据文件（metadata file），简称为“元文件”，其中包括了用于文件定位和恢复的数据结构、引导程序数据及整个卷的分配位图等信息。 在 NTFS 文件系统中，这样的文件主要有16个： $MFT（主文件表，是每个文件的索引） $MFTMirr（主文件表镜像） $LogFile（日志文件） $Volume（卷文件） $AttrDef（属性定义表） $Root（根目录） $Bitmap（位图文件） $Boot（引导文件） $BadClus（坏簇文件） $Secure（安全文件） $UpCase（大写文件） $Extended metadata directory（扩展元数据文件） $Extend\\$Reparse（重解析点文件） $Extend\\$UsnJrnl（变更日志文件） $Extend\\$Quota（配额管理文件） **$Extend\\$ObjId$**（对象ID文件） 在这16项记录之后就是用户建立的文件和文件夹的记录了。 NTFS文件系统大致结构 上图的结构只是 NTFS 文件系统的示意图，并不成完全比例； 元文件在图中只体现了一部分，没有画完整，并且除了$BOOT文件以外，其他元文件的位置不是固定的，例如$MFT文件也可以在$MFTMirr文件之后。 在NTFS文件系统所在分区的最后一个扇区是DBR的备份，但该扇区并不属于NTFS文件系统。 NTFS 文件系统的 DBR 恢复NTFS文件系统的引导扇区是**$Boot的第一个扇区**，它的结构与FAT文件系统的DBR类似，所以习惯上也称该扇区为DBR扇区。DBR扇区在操作系统的引导过程起着非常重要的作用，如果这个扇区遭到破坏，系统将不能正常启动。 NTFS文件系统的DBR扇区与FAT文件系统的结构一样，也包括跳转指令、OEM代号、BPB参数、引导程序和结束标志。 跳转指令 跳转指令本身2字节，它将程序执行流程跳转到引导程序处。例如，当前DBR中的“EB 52”，就是代表汇编语言的“JMP 52”。 注意：该指令本身占用2字节，计算跳转目标地址时以该指令的下一字节为基准，所以实际执行的下一条指令应该位于54H。紧接着跳转指令的是一条空指令NOP（90H）。 OEM代号 这部分占8个字节，其内容有创建该文件系统的OEM厂商具体安排。例如，微软的Windows系统将此处直接设置为“NTFS”，在NTFS文件系统中也称为“文件系统ID”。 BPB（BIOS Parameter Block，BPB参数） BPB 从 DBR 的第12（0BH偏移处）个字节开始，到偏移53H结束，共占用73个字节，记录了有关该文件系统的重要信息。 （1）0BH～0CH：每扇区字节数 每扇区字节数记录每个逻辑扇区的大小，其常见值为512字节，但512并不是固定值，该值可以由程序定义，合法值包括512字节、1024字节、2048字节和4096字节。 （2）0DH～0DH：每簇扇区数 每簇扇区数记录着文件系统的簇大小，即由多少个扇区组成一个簇。 如果这个分区是在系统安装前被格式化而来的，一般大于2GB的分区每簇默认占用8个扇区，也就是每簇大小为4KB，这个字节的内容就为十六进制值“08”。如果这个分区是由一个FAT分区转换而来，则每个簇一般占用1个扇区的空间，也就是每簇大小为512字节，这个字节的内容就是“01H”。 在NTFS文件系统中所有的簇从0开始进行编号，每个簇都有一个自己的地址编号，并且从分区的第一个扇区就开始编簇。 （3）0EH～0FH：DBR保留扇区数 NTFS文件系统中DBR没有保留扇区，该值常为“0000”。 （4）10H～12H：总是0 这3个字节总是“00 00 00”。 （5）13H～14H：未用 这两个字节不用。 （6）15H～15H：介质描述符 这个字节为介质描述字节，一般硬盘为“F8H”；双面5.25英寸软盘为“F9H”；双面3.5英寸软盘RAM虚拟盘为“FAH”；3.5英寸、1.44MB的软盘一般为“F0H”。因为NTFS分区一定在硬盘上，所以此处常为16进制数“F8”。 （7）16H～17H：未用 这两个字节不用。 （8）18H～19H：每磁道扇区数 这是逻辑C/H/S中的一个参数，其值一般为63，NTFS已经不用此参数。 （9）1AH～1BH：磁头数 这是逻辑C/H/S中的一个参数，其值一般为255，NTFS已经不用此参数。 （10）1CH～1FH：隐藏扇区数 隐藏扇区数是指本分区之前使用的扇区数，该值与分区表中所描述的该分区的起始扇区号一致。对于主磁盘分区来讲，是MBR到该分区DBR之间的扇区数；对于扩展分区中的逻辑驱动器来讲，是其EBR到该分区DBR之间的扇区数。 （11）20H～23H：未用 这4字节不用。 （12）24H～27H：未用 这4字节不用，但总为80008000。 （13）28H～2FH：扇区总数 扇区总数是指分区的总扇区数。NTFS的BPB中记录的分区大小比分区表中记录的少一个扇区，因为分区最后一个扇区留给DBR备份使用了。 （14）30H～37H：$MFT的起始簇号 这8字节为$MFT的起始簇号，注意这个位置使用簇号定义的，而不是扇区号，并且该地址不是固定值。 （15）38H～3FH：$MFTMirr的起始簇号 这8字节为$MFTMirr的起始簇号，这个位置也使用簇号定义，而不是扇区号。$MFTMirr的地址也不是固定值的，可以在$MFT之后，也可以在$MFT之前。本例中，$MFTMirr的地址就在$MFT之前。 （16）40H～40H：文件记录的大小描述 这一个字节描述每个文件记录的簇数。注意该参数为带符号数，当其是负数时，说明每个文件记录的大小要小于每簇扇区数，在这种情况下，文件记录的大小用字节数表示，计算方法为：2-1×每个文件记录的簇数。例如，图4-401的DBR中该参数值为“F6H”，换算为十进制等于“-10”，所以每个文件记录的大小是2-1×-10＝210＝1024字节。 （17）41H～43H：未用 这3字节不用。 （18）44H～44H：索引缓冲的大小描述 这一个字节描述每个索引缓冲的簇数。注意该参数也是带符号数，当其是负数时，说明每个索引缓冲的大小要小于每簇扇区数，在这种情况下，索引缓冲的大小用字节数表示，计算方法为：2-1×每个索引缓冲的簇数。 （19）45H～47H：未用 这3字节不用。 （20）48H～4FH：卷序列号 这8字节为分区的逻辑序列号，也就是在命令行下输入DIR命令后显示的一排数据，这个序列号是硬盘格式化时随机产生的。 （21）50H～51H：校验和 BPB的最后四个字节是其校验和，一般都为0。 引导程序 NTFS的DBR引导程序占用426字节（54H～1FDH），其负责完成将系统文件NTLDR装入。对于一个没有安装操作系统的分区来讲，这段程序没有用处。 结束标志 DBR的结束标志与MBR、EBR的结束标志都相同，为55 AA。 以上5个部分共占用512字节，正好是1个扇区，这个扇区属于$BOOT文件的组成部分。该部分的内容中除了第5部分结束标志是固定不变之外，其余4部分都是不完全确定的，都因操作系统版本的不同而不同，也因硬盘的逻辑盘参数的变化而变化。 恢复 NTFS DBR如果 $BOOT 的第一个扇区（引导扇区）损坏，我们可以进行参数的填写，以恢复 NTFS DBR。 从备份复制通过解析元文件，计算出分区大小，从 DBR 位置跳转大小后找到该分区的备份，复制备份至DBR即可。 手动填写计算BPB参数，进行手工填写跳转指令、BPB参数、结束标志以恢复NTFS分区 从别的NTFS DBR复制在分区大小≥2GB时，我们可以直接复制一个现有的 NTFS DBR 至需要恢复的引导扇区处，修改位置、大小参数（有些需要修改每簇扇区数、MFT、MFTMirr位置等）即可恢复其DBR。 NTFS 文件系统的元文件 $MFT将一个分区格式化为NTFS后，格式化程序会往该分区中写入很多重要的系统信息，这些系统信息在NTFS文件系统中称为元文件。这些元文件用户是不能访问的，它们的文件名的第一个字符都是“$”，表示该文件是隐藏的，用户无法访问和修改。 在 NTFS 文件系统中，元文件主要有16个。 序号 元文件 功能 0 $MFT 主文件表本身，是每个文件的索引 1 $MFTMirr 主文件表的部分镜像 2 $LogFile 事务型日志文件 3 $Volume 卷文件，记录卷标等信息 4 $AttrDef 属性定义列表文件 5 $Root 根目录文件，管理根目录 6 $Bitmap 位图文件，记录了分区中簇的使用情况 7 $Boot 引导文件，记录了用于系统引导的数据情况 8 $BadClus 坏簇列表文件 9 $Quota（NTFS4） 在早期的Windows NT系统中此文件为磁盘配额信息 10 $Secure 安全文件 11 $UpCase 大小写字符转换表文件 12 $Extend metadata directory 扩展元数据目录 13 $Extend$Reparse 重解析点文件 14 $Extend$UsnJrnl 加密日志文件 15 $Extend$Quota 配额管理文件 16 $Extend$ObjId 对象ID文件 $MFT文件介绍每个文件都有一个文件记录，包括元文件本身，而主文件表（$MFT）就是专门用来存储文件记录的一个元文件，在$MFT中前16个文件记录总是元文件的纪录。16个元文件中主文件表（$MFT）是一个非常重要的元文件，它由文件记录构成，每个文件记录占用2个扇区。 由于$MFT文件本身的重要性，为了确保文件系统结构的可靠性，系统专门为它准备了一个镜像文件（**$MFTMirr），也就是$MFT中的第2个记录。不过这并不是$MFT的完整镜像，而是一个小部分镜像，一般只镜像$MFT中的前四个**文件记录。 $MFT中前16个文件记录总是元文件的记录，并且这16个文件记录的顺序是固定的，下面对这16个记录简单做一个介绍： 第1个记录就是**$MFT自身的记录**，也就是说$MFT首先对自己进行管理。 第2个记录是**$MFTMirr的记录，也就是$MFT前4个文件记录的镜像**。 第3个记录是日志文件（$LogFile）的记录，该文件是NTFS为实现可恢复性和安全性而设计的。当系统运行时，NTFS就会在日志文件中记录所有影响NTFS卷结构的操作，包括文件的创建和改变目录结构的命令，从而可在系统失败时能够恢复NTFS卷。 第4个记录是卷文件（$Volume）的记录，它包含卷名、NTFS的版本和一个标明该磁盘是否损坏的标志位，NTFS文件系统以此决定是否需要调用Chkdsk程序来进行修复。 第5个记录是属性定义表（$AttrDef，attribute definition table）的记录，其中存放着卷所支持的所有文件属性，并指出它们是否可以被索引和恢复等。 第6个记录是根目录（$ROOT）的记录，其中保存着该卷根目录下的所有文件和目录的索引。在访问一个文件后，NTFS就保留该文件的MFT引用，第二次就能够直接访问该文件。 第7个记录是位图文件（$Bitmap）的记录，NTFS卷的簇使用情况都保存在这个位图文件中，其中每一位（bit）代表卷中的一簇，标识该簇是空闲还是已分配。 第8个记录是引导文件（$Boot）的记录，该文件中存放着操作系统的引导程序代码。该文件必须位于特定的磁盘位置才能够正确地引导系统，一般都是位于卷的最前面。 第9个记录是坏簇文件（$BadClus）的记录，它记录着该卷中所有损坏的簇号，防止系统对其进行分配使用。 第10个记录是安全文件（$Secure）的记录，它存储着整个卷的安全描述符数据库。NTFS文件和目录都有各自的安全描述符，为节省空间，NTFS将文件和目录的相同描述符存放在此公共文件中。 第11个记录为大写文件（$UpCase，upper case file）的记录，该文件包含一个大小写字符转换表。 第12个记录是扩展元数据目录（$Extended metadata directory）的记录。 第13个记录是重解析点文件（$Extend$Reparse）的记录。 第14个记录是变更日志文件（$Extend$UsnJrnl）的记录。 第15个记录是配额管理文件（$Extend$Quota）的记录。 第16个记录是对象ID文件（$Extend$ObjId）的记录。 第17～23记录是系统保留的记录，暂时不用，用于将来扩展。 从第24个记录开始存放用户文件的记录。 $MFT文件在文件系统中的存放地址，可以通过BPB中的“$MFT开始簇号”之一参数值获得。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"FAT32","slug":"FAT32","permalink":"https://blog.im0o.top/tags/FAT32/"}]},{"title":"新Winhex数据恢复题库","slug":"新Winhex数据恢复题库","date":"2021-10-21T11:51:16.000Z","updated":"2022-05-24T06:19:06.147Z","comments":true,"path":"posts/winhex-tiku.html","link":"","permalink":"https://blog.im0o.top/posts/winhex-tiku.html","excerpt":"","text":"前言由于 Baklib 停止了题库服务的支持，故弃用其服务，改用 VuePress + GithubPages 服务搭建新的题库。 新的题库地址：https://im0o.top/winhex-tiku/ 题库中所有题目均可被转载使用，但请注明转载出处 im0o.top/winhex 或 im0o.top，并且不可以商用。 如何使用题库 在题库中下载题目。 打开 Windows 磁盘管理 （右键计算机→管理→磁盘管理）。 右键点击磁盘管理，点击附加 VHD。 选择下载解压好的题目路径，点击确定即可附加VHD至计算机。 成功附加 VHD 后即可打开 Winhex，选择对应的虚拟磁盘进行数据恢复训练。 结束数据恢复后，分离 VHD 文件。 VHD 为虚拟磁盘文件，在虚拟磁盘的分区中存放的文件实际将占用 VHD 文件的大小（动态扩展） 所以请不要在 VHD 内存放文件，这将占用你实际文件位置的大小！ 右键相应的虚拟磁盘，点击分离 VHD 即可，如果不希望题目占用您的存储空间，在分离后请记得删除该VHD文件。 参考资料本系列教程参考了以下资料文献。 《数据恢复技术深度揭秘》刘伟编著，2010.5版，北京：电子工业出版社 张景生，汪中夏，刘伟. 《数据恢复方法及案例分析》，电子工业出版社 戴士剑. 《数据恢复技术》. 电子工业出版社 （美）理曼德. 《UNIX 编程艺术》. 电子工业出版社 Brain Carrier. 《File System Forensic Analysis》. Addison Wesley Professional Apple 官方技术文档（http://developer.apple.com/）. Technical Note TN1150 ACE Laboratory. PC3000 User Manual Vadim Morozov. Sergey Yatsenko. Modern Hard disk drive 《基于Winhex的HFS+文件提取方法研究》徐健，江苏联合职业技术学院扬州分院 《基于Ext3文件系统数据提取方法的研究》徐健，信息技术与信息化 《基于Ext4文件系统的数据提取方法研究》徐健，信息技术与信息化 《ExFAT被快速格式化成NTFS后数据恢复的研究》徐健，江苏联合职业技术学院扬州分院 《数据恢复高级技术》汪中夏，刘伟，电子工业出版社 《识数寻踪：Winhex 应用与数据恢复开发秘籍》高志鹏，张志伟，孙云峰，人民邮电出版社 打赏Winhex 手工恢复数据教程系列为站长0o酱一人编写维护，感谢以上前辈们的资料与文献，欢迎点击下方打赏按钮对我进行支持。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"VuePress","slug":"VuePress","permalink":"https://blog.im0o.top/tags/VuePress/"}]},{"title":"使用Winhex进行数据恢复（4）","slug":"使用Winhex进行数据恢复（4）","date":"2021-10-21T11:51:00.000Z","updated":"2022-05-24T06:19:06.169Z","comments":true,"path":"posts/7783b927.html","link":"","permalink":"https://blog.im0o.top/posts/7783b927.html","excerpt":"","text":"前言本节我们将进一步学习 FAT32 格式分区的损坏实例与恢复方式、技巧。 你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件 知识点总览 FAT32 文件系统删除文件的分析 FAT32 文件系统删除文件后目录项起始簇号高位清零的分析 实例：恢复 FAT32 中被删除的文件 FAT32 文件系统删除文件的分析本案例中，在 FAT32文件系统 中有文件 codingcat.gif 文件删除前从文件系统底层了解 FAT32 文件系统中文件各部分结构的管理。现在以 FAT32 分区中的文件 codingcat.gif 为例，讲解文件的底层结构。 上图为文件在资源管理器内的截图。 由于文件名超过了8个字符，目录项中就会存储两条名字，一条为长文件名目录项，一条为短文件名目录项。 从目录项中可以看出该文件开始于 05H（5号）簇，文件大小为 1A B7 78H（十进制为 1750904）字节。 FAT32 文件系统的 FAT 表是 32 位的，每个 FAT 项占用 4字节。 从上图 FAT表 中可以看出，文件codingcat.gif是连续存放的，该文件共占用了107个簇。 用Winhex跳转到分区的5号簇，其部分内容如图所示。 从5号簇开始，往后连续的 1750904 字节（ codingcat.gif 的文件大小），就是这个文件的所有数据。 删除文件首先使用 Shift+Delete 将文件 codingcat.gif 删除（不是放入回收站） 删除后的文件目录项如图所示。 从上图看出，codingcat.gif 的文件目录项的第一个字节已经被改为 E5 了，而文件名的其他字节没有发生变化，文件起始簇号 05H（5号）簇看似没有改变，但因为 FAT32 文件系统是使用4个字节记录文件开始簇号的，当文件被删除后，文件开始簇号的高位2个字节是要清零的，所以 文件开始簇号 这个值实际上已经发生了改变，只是因为这个文件的高位簇部分本身就是 00 00H，所以看不出改变。另外文件大小 1A B7 78H （十进制为 1750904）字节没有改变。 在FAT表中查看原本 codingcat.gif占用的部分，我们发现： 文件 codingcat.gif 在被删除后，其 FAT 表的簇链已经全部清零。 而跳转到5号簇查看文件的数据区 如上图所示，数据区的内容并没有被改变。 恢复文件将这个被删除的文件的数据区内容全部选中→编辑→复制选块→至新文件，选择保存路径，恢复文件。 导出后的文件 recovery.gif 在资源管理器中的截图 可以看到，这个就是被删除的 codingcat.gif 文件，以上也就是恢复被删除文件的过程。 补充说明 如果文件在数据区中存放的位置比较靠后，文件起始簇号就会很大，那么文件目录项中记录文件起始旗号的高位两个字节就会有数据， 当文件删除时， 这两个字节会被清零，该文件的起始簇号值也就丢失了，这种删除的文件比较难恢复。 文件删除后，其 FAT 表中的簇链也会清零，如果文件有碎片，也就是不连续存放，这种删除的文件也比较难恢复。 文件删除后，虽然文件的内容并不会被清除，但其所占用的簇会释放，这些簇就很容易被其他文件进一步占用，这样就覆盖了被删除文件的数据 这种情况下的数据将无法恢复。 FAT32 文件系统删除文件后目录项起始簇号高位清零的分析上文提及到，如果文件在数据区中存放的位置比较靠后，文件起始簇号就会很大，那么文件目录项中记录文件起始簇号的高位两个字节就会有数据，当文件删除时，这两个字节会被清零。以下是高位簇目录项文件被删除的情况分析。 文件放入回收站后清空回收站本小节实例来源《数据恢复深度揭秘》 针对文件放入回收站后清空回收站的操作分析。 在案例中的分区G下有一个文件 setupapi.log，该文件的信息，目录项如下图所示。 将该文件放入回收站后清空回收站（不是直接删除）。 查看该文件的目录项后。 从目录项中可以看出，setupapi.log 文件的目录项仅仅首字节变成了 E5，其他位置都没有发生变化，起始簇号的高位簇也没有清零。 结论在 FAT32 文件系统中，将文件先放入回收站，再清空回收站，这种删除方法并不清楚文件目录项中起始簇高位的两个字节。 直接删除文件在分区根目录下有一个文件 river.bmp 如下图所示。 文件目录项： ​ 该文件起始簇号高位的两个字节是 00 3FH，低位的两个字节是 8D 10H，合并到一起，则该文件起始簇号的四个字节为 3F8D10H，转换为十进制为 4164880。 ​ 接下来用 Shift+Delete 组合键把文件彻底删除。 从目录项中可以看出，river.bmp 文件的目录项首字节变成了 E5，起始簇号高位的两个字节也被清零，如果用常规的数据恢复软件来恢复这个被删除的文件，软件会把该文件的起始簇号认为是 8D10H 簇，显然这样恢复出来的文件不可能正确。 结论在 FAT32 文件系统中，将文件用 Shift+Delete 组合键直接彻底删除，这种删除方法将清除文件目录项中起始簇号高位的两个字节。 直接删除目录在分区的根目录下有一个文件夹 789. 该文件夹的起始簇号高位的两个字节是 002FH，低位的两个字节是 3427H，合并到一起，则该文件夹的起始簇号为 2F3427H，转换为十进制为 3093543。 在文件夹 789 下有两个文件 explorer.exe 和 iis6.doc。 文件 explorer.exe 起始簇号的四个字节为 2F3428H；文件 iis6.doc 起始簇号的四个字节为 2F37E4H。 用 Shift+Delete 快捷键彻底删除文件夹 789。 从目录项中可以看出，789 文件夹的目录项首字节变成了 E5，起始簇号的高位两个字节也被清除。 文件 explorer.exe 和 iis6.doc 的目录项完好无损，首字节没有改为 E5， 起始簇高位也没有清零。 结论在 FAT32 文件系统中，将文件夹用 Shift+Delete 快捷键彻底删除，这种删除方法将清除文件夹的目录项中的高位簇，而文件夹里面的目录项不会改动。 实例：恢复 FAT32 中被删除的文件本次实例没有对MBR DBR作破坏 仅对 Shift+Delete 删除的文件进行恢复 但实例教程中将以底层方式进行恢复，步骤会较为繁琐 本题需要找到的文件为 手工重建复合文档.doc 导入题目 FAT32-211026.vhd 后用 Winhex 打开 跳转到 FAT32 分区 DBR 从 DBR 获取到保留区大小、FAT 表大小、每簇扇区数为32、15,352、32。 向后跳转 30,736 扇区（保留区大小+ 2 * FAT 表大小）到达根目录。 分析根目录 切换编码预览，在切换至 GB-2312 编码时发现根目录中有包含 工重~1DOC 字样的文件，其文件目录项第一个字节为 E5，初步推断该文件为我们需要恢复的文件。 获取文件位置，大小 经过数据解释器查看，该文件的位置在 6号簇，大小为 1,058,306 字节。 跳转至文件位置，选取大小进行恢复 向后跳转 128扇区（每簇扇区数 * (6-2)） 因为根目录簇号为2，文件簇号为6，则需要向后跳转6-2=4个簇 跳转后发现文件为 复合文档，选中文件头，向后跳转1,058,306 字节，选中末尾。 右键 → 编辑 → 复制选块 → 至新文件 选取路径，进行文件恢复。 至此，你成功恢复了被删除的 FAT32 分区中的文件。","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"FAT32","slug":"FAT32","permalink":"https://blog.im0o.top/tags/FAT32/"}]},{"title":"使用 Gitee/Github + PicGo 实现高速稳定图床","slug":"使用-Gitee-Github-PicGo-实现高速稳定图床","date":"2021-10-17T11:41:00.000Z","updated":"2022-05-24T06:19:06.177Z","comments":true,"path":"posts/fbb2e56c.html","link":"","permalink":"https://blog.im0o.top/posts/fbb2e56c.html","excerpt":"","text":"Gitee 疑似使用 302 重定向防盗链，导致图片无法正常显示，请使用 Github + jsdelivr 代替 效果展示 图片来源：https://whvn.cc/z8dg9y 存储地址：gitee/im0o/photobed github/0ojixueseno0/image 开始安装PicGo从Github Releases下载PicGo安装包 Releases · Molunerfinn/PicGo (github.com) PicGo官网：PicGo (molunerfinn.com) 应用，功能截图 注意 请确保你安装了 Node.js， 并且版本 &gt;= 8。 默认上传图床为SM.MS。PicGo上传之后，会自动将上传成功的URL复制到你的剪贴板，支持5种复制格式。 使用方法 直接在主窗口上传区域拖拽图片上传。 直接在主窗口上传区域点击，然后弹出文件浏览器后选择图片上传。 可以将图片复制到剪贴板，然后点击剪贴板图片上传按钮来上传。 使用Gitee+PicGo 优点： 国内访问速度快 缺点： 图片文件不能大于1MB 安装PicGo插件在PicGo → 插件设置中搜索gitee关键词，安装对应插件，我使用的是gitee-uploader 1.1.2 新建码云仓库我们需要在Gitee建立一个仓库作为图片存放的地点。 点击网页右上角的+号，新建仓库 新建仓库后，按照以下方式进行配置： 将仓库设置为开源仓库 勾选设置模板——Readme文件 确认无误后即可点击创建，创建仓库作为图床存放图片。 获取私人令牌(Token)后续对PicGo的配置中将使用到码云的私人令牌，通过以下步骤获取私人令牌(Token)。 从头像的下拉菜单中进入设置。 在侧边栏中找到私人令牌，点击进入其设置页面。 点击生成新令牌，并按照下图配置权限。 配置描述后提交令牌生成。 需注意：私人令牌只有在生成的时候明文显示一次，建议妥善保存私人令牌。丢了或者忘了就得重新生成一个了。 配置PicGo安装完成后，点击图床设置 → gitee 进行Gitee仓库的配置。 你可以在PicGo设置中关闭不需要的图床 repo：用户名/仓库名称，示例中的值应填为im0o/image，你可以在仓库的详情页面的链接上找到。 branch：分支，默认填master，为详情页中显示的分支。 token：填写刚刚获取到的私人令牌 path：路径，留空则在根目录上传文件 customPath：默认default即可 customUrl：留空即可 配置完毕后即可开始上传图片使用了。需要注意的是：Gitee大于1M的图片文件需要登录后查看，所以如果是过大的文件可以尝试图片压缩，或更换图床等。 使用Github+PicGo 缺点：国内访问速度慢 相比于Gitee：没有大小限制 新建Github仓库我们需要在Github建立一个仓库作为图片存放的地点。 点击网页右上角的+号，New Repository 新建仓库 新建仓库后，按照以下方式进行配置： 输入一个仓库名称 设置仓库为Public模式（开源仓库） 勾选Add a README file，生成Readme文件（将自动新建一条名为main的分支） 点击Create repository新建仓库 获取Personal access token后续对PicGo的配置中将使用到Github的Personal Access Token，通过以下步骤生成Token。 点击页面右上角的头像 → Settings 进入设置页面 在侧边栏中找到Developer settings点击进入设置页面，点击页面侧边栏中的Personal access tokens进入token配置页面。 点击 Generate new token 按钮，验证密码后按照下图配置生成token。 注意：Expiration 为token有效时间，请妥善保管好所有有限时间为无限（不过期）的token，以保护信息安全。 填写Token描述 设置截止时间为No expiration（不截止） （不安全，请妥善保管好所有不会过期的token） 勾选repo复选框 配置提交后token生成。 妥善保管好生成的token，这段字符串只会显示这么一次！ 配置PicGo 仓库名：填写 用户名/仓库名，例子0ojixueseno0/imagetest 分支名：默认填写 main Token：填写刚刚生成的 Personal access token 存储路径：留空则存放在仓库根目录 域名：将域名栏内填入 https://raw.githubusercontent.com/[用户名]/[仓库名]/main 你可以在自定义域名内填入 https://cdn.jsdelivr.net/gh/[用户名]/[仓库名]@[分支(默认main)]使用jsdelivr的CDN加速服务 配置完毕后即可开始上传图片使用了。 Typora与PicGo的联动在Typora → 偏好设置 → 图像中，可以设置上传服务为PicGo app。将路径设置为PicGo程序所在的位置即可。 需要注意的是，在设置好PicGo路径后需要点击验证图片上传选项进行测试。若测试端口与PicGo的Server端口不同，需要去PicGo进行设置。 在Typora中的测试端口为36677，则需要前往PicGo的Server设置进行设置端口为36677。 设置成功后即可重新验证，成功连接上传后就会反馈验证成功字样。 接下来你就可以在Typora中直接粘贴本地图片，然后右键图片，点击上传图片，即可自动将本地图片上传至设置好的图床上，并且一键替换Typora中的链接为外链。","raw":null,"content":null,"categories":[{"name":"一些教程","slug":"一些教程","permalink":"https://blog.im0o.top/categories/%E4%B8%80%E4%BA%9B%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"图床","slug":"图床","permalink":"https://blog.im0o.top/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"图片","slug":"图片","permalink":"https://blog.im0o.top/tags/%E5%9B%BE%E7%89%87/"}]},{"title":"基于onebot的Go-Pichubot QQ机器人","slug":"基于onebot的Go-Pichubot-QQ机器人","date":"2021-08-09T05:02:17.000Z","updated":"2022-05-24T06:19:06.149Z","comments":true,"path":"posts/78bda4cc.html","link":"","permalink":"https://blog.im0o.top/posts/78bda4cc.html","excerpt":"","text":"前言这是由python-pichubot重构而来的基于go-cqhttp(Mirai,MiraiGo的Onebot)的QQ机器人 开源地址（不包含大学习功能）：Github 初衷做Pichubot的初衷是什么？当然是自动统计QQ群青年大学习完成情况啦 作为一只懒狗，能偷懒的地方当然得偷懒咯 功能 Python Pichubot[!抽签][!cq] 开始抽签（观音签 共100签）[!鸡汤][!cureword] 随机获取一碗鸡汤[!人话][!nbnhhsh]+[词语缩写] 查询缩写对应的人话[!机翻][!翻译][!百度翻译][!fanyi]+[目标语言]+[原文] 翻译语言[!大学习][!dxx]+[查询][cx][!大学习][!dxx]+[列出][list][!大学习][!dxx]+[未完成][at][!大学习][!dxx]+[重置][reset][!大学习][!dxx]+[添加][add]+[@某人][!大学习][!dxx]+[移除][remove]+[@某人] Go-Pichubot大学习 长事件示例 短时间示例 FAQ 如何判断大学习完成状态？读取发送的图片，与已有的上传图片进行比对 相似度达到阈值则算作完成 重构后在数据库内加入了大学习成绩单的分享链接，可以读取成绩单数据 重构后的bot使用方法重构前：所有方法写道main函数里 重构后：所有方法写到mainbot内 可以外部注册调用（感觉像个包了hhh） 写在最后 时间上，皮丘Bot比鸡汤v2要早好几个月 但是我忘了写文档了，特此补上 如果有啥我想起来的 会更新进来哒 之后如果有时间就把这个写成包 造福全人类 现在已经是go-package了！ Pichubot QQ讨论群：645995997","raw":null,"content":null,"categories":[{"name":"杂谈/踩坑笔记","slug":"杂谈-踩坑笔记","permalink":"https://blog.im0o.top/categories/%E6%9D%82%E8%B0%88-%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"go","slug":"go","permalink":"https://blog.im0o.top/tags/go/"},{"name":"onebot","slug":"onebot","permalink":"https://blog.im0o.top/tags/onebot/"},{"name":"Pichubot","slug":"Pichubot","permalink":"https://blog.im0o.top/tags/Pichubot/"},{"name":"QQ机器人","slug":"QQ机器人","permalink":"https://blog.im0o.top/tags/QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/"}]},{"title":"CureWord.top 鸡汤重构笔记","slug":"CureWord-top-鸡汤重构笔记","date":"2021-08-09T00:40:04.000Z","updated":"2022-05-24T06:19:06.194Z","comments":true,"path":"posts/b70820cd.html","link":"","permalink":"https://blog.im0o.top/posts/b70820cd.html","excerpt":"","text":"前言最近收到朋友的催更，花了一周左右把go-Cureword的进度给赶完了 这篇博客用来记录我这期间踩过的所有坑，解决方法，以及心得 因为是工程写完之后来统计的 可能会有特别多的疏漏 鸡汤站地址：Cureword v2 心灵鸡汤 工程开源地址：前端: github.com/…/cureword.top后端: github.com/…/go-cureword 坑🕳 Vue.js – axios 通过POST方式传输的json是Request Payload搜罗了一堆东西，最后发现只要你请求头是 Content-Type: application/json貌似Golang就能读取出来… 生成API接口文档最开始使用的是APIPost/Postman的生成方法，但是这两个软件生成出来的文档夹带太多私货（指广告），后来就使用了apidoc进行生成 APIDOC 可以读取源码的注释 进行生成api文档 Go net/http 处理静态文件生成出来的api文档是一个文件夹，带静态文件，需要一并搭载出来 解决方法： 1http.Handle(&quot;/&quot;, http.FileServer(http.Dir(&quot;/xxx/&quot;))) 刚开始这个方法貌似用不了，调试了很久又发现能用了，盲猜浏览器缓存的锅 （这个方法真的是简单粗暴方便）4. ## Go []byte 与 json 互相转换方法（搜索次数多） 12b, _ := json.Marshal(m)//将json对象序列化为byte[]json.Unmarshal(b,&amp;ki)//将序列化的byte[]重写反序列化为对象。 Gorm 指定struct对应的表名 12345678910 type Article struct &#123; Id uint32 `json:&quot;id&quot;` Title string `json:&quot;title&quot;` Content string `json:&quot;content&quot;` &#125; func (Article) TableName() string &#123; //实现TableName接口，以达到结构体和表对应，如果不实现该接口，并未设置全局表名禁用复数，gorm会自动扩展表名为articles（结构体+s） return &quot;it_article&quot; &#125;// 后记：貌似直接使用db.Table(&quot;表名&quot;)指定即可 axios 相应后执行的函数无法使用element-ui的函数(this指向有变化)原使用方法 1234axios .get(&quot;host&quot;) .then(function(res)&#123;&#125;) .catch(...) 现使用方法 1234axios .get(&quot;host&quot;) .then((res)=&gt;&#123;&#125;) .catch(...) 原因：function(res)&#123;this.xxx&#125; 和 (res)=&gt;&#123;this.xxx&#125; 中的 this的指向是不同的，箭头函数并不简单是匿名函数的简写。 在JS中，箭头函数并不是简单的function(){}匿名函数的简写语法糖，实际上，箭头函数和匿名函数有个明显的区别：箭头函数内部的this是词法作用域，在编写函数时就已经确定了。而匿名函数的this指向运行时实际调用该方法的对象，无法在编写函数时确定。 vue router 刷新后无法定位路由将 router/index.js中的 mode从 history改为 hash即可 使用https时的证书问题最后放弃了https，全站使用http Wakatime前往Wakatime查看 go-Cureword 编写时所需的时长 我才发现这玩意快写了30个小时了… API获取API请前往爱发电进行充电，充电一次获取1个月API使用权限","raw":null,"content":null,"categories":[{"name":"杂谈/踩坑笔记","slug":"杂谈-踩坑笔记","permalink":"https://blog.im0o.top/categories/%E6%9D%82%E8%B0%88-%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"http","slug":"http","permalink":"https://blog.im0o.top/tags/http/"},{"name":"cureword","slug":"cureword","permalink":"https://blog.im0o.top/tags/cureword/"},{"name":"心灵鸡汤","slug":"心灵鸡汤","permalink":"https://blog.im0o.top/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"},{"name":"API","slug":"API","permalink":"https://blog.im0o.top/tags/API/"}]},{"title":"2021年5月11日 小记","slug":"2021年5月11日-小记","date":"2021-05-11T09:41:08.000Z","updated":"2022-05-24T06:19:06.200Z","comments":true,"path":"posts/f0df67d7.html","link":"","permalink":"https://blog.im0o.top/posts/f0df67d7.html","excerpt":"","text":"梦昨晚十二点半睡着了，早上7点醒了。 做了个有丶奇怪的梦，梦里像GTA一样有个小地图，小地图上有三个红色的骷髅头在向我高速移动。有三个蓝色的骷髅头追着我，当时我特别心悸，还没反应过来就被打到了，然后就惊醒了… 大概长这样...(对没错就是你想的那个游戏的boss的技能) 午饭好耶，上次去考试院装机器的工资到账惹！ 徐老板（老师）带我们仨（我、zhjk、mohe）和几个老师去星伦多吃自助餐。（好耶！是自助餐！） 中午11点，老徐巨认真的和我们说（也可能是自言自语） “我要把论文写好，现在就写，不能再拖了。”说完，便打开了魔兽世界…. ”还有20秒就出发。“（很突然啊，我大意了，没有闪） “老师你这太可怕了，还掐秒“ ”不愧是时间管理大师！“ ”等啥呢，出发了出发了“ （坐车到万象汇） 右一就是徐老板（逃（希望不要发现我偷拍23333 结果另外俩家伙一个全程各种吃生鱼片、冰淇淋…一个各种吃披萨….. 还拿了一堆肉烤了不吃….结果都是我吃的淦🙄（最后体重最轻的吃的最多…） 啊对了，这俩家伙还霍霍饮料…emmm具体是怎么干的呢… 大概是这样： ​ 拿大杯子打一坨冰沙（啥口味都来点） ​ 加冰淇淋 ​ 搅和搅和 啊结果他们拿的两大盘肉多数都是我吃的，这俩全在那玩，最后俩家伙都说吃不下了…😡（我有自助餐我不吃，我自制饮料，欸就是玩儿） 走的时候还拿了份冰淇淋哈哈哈哈，不得不说冰淇淋机打出来的冰淇淋单吃感觉不太行，口感更像冰沙；但是加一点柠檬汁就不一样了，瞬间味道层次和程度大幅提升。 zhjk打了亿点点冰淇淋… 牛哇牛哇 工具人日常工具人，统计了一堆数据….（计算机等级考试本系成绩） 好耶，整个年级就我们仨过了计算机二级。英语一级也过了，撒花~ 希望我能考过二级python 😀在这里挖个坑以后填 我和zhjk考完英一出来那是一个慌啊，各种觉得自己出岔子过不了…（有卖弱嫌疑） mohe考完之后，啊~那叫一个自信，什么 “这次我必过，太简单了“ ”比我想象的简单多了” “我全做出来了” “打完这场仗我就回老家结婚” 各种flag飞出… 结果：mohe英一没过（惨咯） 然后就是把这几天的视频任务完成了，剪了个报告视频。 工程名是对口相声（哈哈哈哈哈哈）因为开头我和zhjk在念台词（虽然后期配音）。 ~~ 撒….晚饭吃什么呢…. ~~ 啊啊啊写摘要忘了点外卖！！！我晚上没吃的了呜呜呜呜呜，我简直是这个世界上最惨的崽。 At last 后记： 日记这个坑在网站更新之前就开了，到现在才写第一篇日记哈哈哈 希望我能养成随手记录生活的习惯吧~","raw":null,"content":null,"categories":[{"name":"日记","slug":"日记","permalink":"https://blog.im0o.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"日记","slug":"日记","permalink":"https://blog.im0o.top/tags/%E6%97%A5%E8%AE%B0/"}]},{"title":"小记：拿到国家奖学金","slug":"小记-拿到国家奖学金","date":"2020-12-25T20:33:43.000Z","updated":"2022-05-24T06:19:06.147Z","comments":true,"path":"posts/661c1b85.html","link":"","permalink":"https://blog.im0o.top/posts/661c1b85.html","excerpt":"","text":"概要在 2020 年 12 月 22 日，站长拿到了 19-20 学年的国家奖学金，共计 6000 元。 全部打给母上大人了哈哈哈哈哈。 照片 Ps封面是oc约的模板图hhh 本文发布日期于2022年1月23日。","raw":null,"content":null,"categories":[{"name":"日记","slug":"日记","permalink":"https://blog.im0o.top/categories/%E6%97%A5%E8%AE%B0/"}],"tags":[{"name":"奖状","slug":"奖状","permalink":"https://blog.im0o.top/tags/%E5%A5%96%E7%8A%B6/"},{"name":"奖学金","slug":"奖学金","permalink":"https://blog.im0o.top/tags/%E5%A5%96%E5%AD%A6%E9%87%91/"}]},{"title":"Discuz日记 - 更换域名","slug":"Discuz日记-更换域名","date":"2020-08-26T21:55:07.000Z","updated":"2022-05-24T06:19:06.190Z","comments":true,"path":"posts/39c0dcf5.html","link":"","permalink":"https://blog.im0o.top/posts/39c0dcf5.html","excerpt":"前言前段时间，我给我们班级搭建了一个dz论坛（G19305空间站），之后觉得比较大材小用了，就决定更换域名，作为学校的论坛使用（我们学校没有自己的论坛:D）\n后续为了加强安全（Https），也为了看起来nb一点（浏览器的小锁），我们给新的域名上了CloudFlare的CDN加速，还有它的证书。但是，我们发现游客访问时虽然是有小锁的，在登录后就又变为不安全了。","text":"前言前段时间，我给我们班级搭建了一个dz论坛（G19305空间站），之后觉得比较大材小用了，就决定更换域名，作为学校的论坛使用（我们学校没有自己的论坛:D） 后续为了加强安全（Https），也为了看起来nb一点（浏览器的小锁），我们给新的域名上了CloudFlare的CDN加速，还有它的证书。但是，我们发现游客访问时虽然是有小锁的，在登录后就又变为不安全了。 找出问题所在在“不安全”页面中按下F12键，打开Console，得到提示，是一张图片的源地址为不安全的，经过检查发现是用户的头像（来自UCenter），地址还是旧的g19305.top。所以如果想让网页完全安全，我们需要把UCenter的链接也改为新的地址。 解决问题在dz论坛变更域名后，你需要把以下地点的域名都检查并变更： 管理后台 全局——站点信息——网站URL 全局——域名设置——应用域名 全局——域名设置——根域名设置 界面——导航设置——链接竖栏内的链接 运营——站点广告（我的站点有导向帖子的广告位） 运营——友情链接 运营——关联链接 站长——UCenter设置——UCenter 访问地址 登录UCenter——应用管理——应用的主URL 核查并更改好这些信息后重启你的服务器，进入CloudFlare后台将页面缓存清空，等待服务器开启后Ctrl+F5刷新即可 最后，论坛终于上小锁辣！！！超帅的有没有哈哈哈哈哈~ 网页：扬州高职校","raw":null,"content":null,"categories":[{"name":"杂谈/踩坑笔记","slug":"杂谈-踩坑笔记","permalink":"https://blog.im0o.top/categories/%E6%9D%82%E8%B0%88-%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"http","slug":"http","permalink":"https://blog.im0o.top/tags/http/"},{"name":"discuz!","slug":"discuz","permalink":"https://blog.im0o.top/tags/discuz/"},{"name":"域名","slug":"域名","permalink":"https://blog.im0o.top/tags/%E5%9F%9F%E5%90%8D/"},{"name":"cloudflare","slug":"cloudflare","permalink":"https://blog.im0o.top/tags/cloudflare/"},{"name":"https","slug":"https","permalink":"https://blog.im0o.top/tags/https/"}]},{"title":"Skript 功能体验服","slug":"Skript-功能体验服","date":"2020-02-12T05:30:23.000Z","updated":"2022-05-24T06:19:06.181Z","comments":true,"path":"posts/8b38d942.html","link":"","permalink":"https://blog.im0o.top/posts/8b38d942.html","excerpt":"为了便于体验博客内的Skript所带来的效果，我搭建了一个我的世界的服务器。\n\n您可以使用以下版本的游戏进入服务器：\nMinecraft 1.12.2+\n理论支持 1.8 1.8.9 1.9 1.10 1.11 1.12 \n\n\n服务器地址：mc.im0o.top\n\n\n","text":"为了便于体验博客内的Skript所带来的效果，我搭建了一个我的世界的服务器。 您可以使用以下版本的游戏进入服务器： Minecraft 1.12.2+ 理论支持 1.8 1.8.9 1.9 1.10 1.11 1.12 服务器地址：mc.im0o.top 以下是服务器的内容与配置： 你可以通过挖掘钻石获取VaultMoney，Ueco的汇率将不定期变动","raw":null,"content":null,"categories":[{"name":"我的Skript旅途","slug":"我的Skript旅途","permalink":"https://blog.im0o.top/categories/%E6%88%91%E7%9A%84Skript%E6%97%85%E9%80%94/"}],"tags":[{"name":"我的世界","slug":"我的世界","permalink":"https://blog.im0o.top/tags/%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C/"},{"name":"minecraft","slug":"minecraft","permalink":"https://blog.im0o.top/tags/minecraft/"},{"name":"skript","slug":"skript","permalink":"https://blog.im0o.top/tags/skript/"}]},{"title":"使用abbrlink插件来缩短文章链接","slug":"使用abbrlink插件来缩短文章链接","date":"2020-02-12T02:10:09.000Z","updated":"2022-05-24T06:19:06.177Z","comments":true,"path":"posts/deee77a9.html","link":"","permalink":"https://blog.im0o.top/posts/deee77a9.html","excerpt":"在分享博客中的文章链接时，链接总是带中文，很多地方都无法识别到中文的部分，某些浏览器的地址栏复制出来的链接则是.../%xx%xx%xx...。\n\n本篇你将了解到如何使用hexo插件abbrlink解决该问题\n","text":"在分享博客中的文章链接时，链接总是带中文，很多地方都无法识别到中文的部分，某些浏览器的地址栏复制出来的链接则是.../%xx%xx%xx...。 本篇你将了解到如何使用hexo插件abbrlink解决该问题 安装插件在博客根目录右键——打开git bash执行指令： 1npm install hexo-abbrlink --save 修改配置文件打开根目录的_config.yml文件，修改下面的配置： 1permalink: posts/:abbrlink.html 添加abbrlink的配置： 123abbrlink: alg: crc32 # 算法：crc16(default) and crc32 rep: hex # 进制：dec(default) and hex 清除已生成文件，重新部署执行下面的指令，一键重新生成并部署到github上 1hexo clean &amp;&amp; hexo d -g 小技巧你可以在每篇文章的Yaml font区域添加一行 1abbrlink: &#x27;xxx&#x27; 以此达到自定义链接地址的目的，例如该链接导向的就是 …/posts/xxx.html","raw":null,"content":null,"categories":[{"name":"一些教程","slug":"一些教程","permalink":"https://blog.im0o.top/categories/%E4%B8%80%E4%BA%9B%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"优化博客","slug":"优化博客","permalink":"https://blog.im0o.top/tags/%E4%BC%98%E5%8C%96%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.im0o.top/tags/Hexo/"}]},{"title":"UltraEconomy -- 全新的货币系统","slug":"UltraEconomy-全新的货币系统","date":"2020-02-09T23:32:56.000Z","updated":"2022-05-24T06:19:06.181Z","comments":true,"path":"posts/4cbde4df.html","link":"","permalink":"https://blog.im0o.top/posts/4cbde4df.html","excerpt":"简介这是一款非常强大（大概）的金融系统，它新增了一种货币。该货币可以与插件Vault，Playerpoints的货币流通。\n这也是我写了这么久sk脚本以来代码行数最多的一个脚本。\n以下是文件信息\n\n\n\n文件名\n大小\n代码行数\n\n\n\nUltraEconomy.sk\n37.3 KB (38,292 字节)\n758行\n\n\n如果你需要该脚本，可以联系我购买。价格为 255CNY\n如有倒卖现象，请联系邮箱&#x61;&#100;&#x6d;&#x69;&#x6e;&#x40;&#x69;&#109;&#x30;&#111;&#46;&#x74;&#x6f;&#x70;，核实后我会追究到底๑乛△乛๑","text":"简介这是一款非常强大（大概）的金融系统，它新增了一种货币。该货币可以与插件Vault，Playerpoints的货币流通。 这也是我写了这么久sk脚本以来代码行数最多的一个脚本。 以下是文件信息 文件名 大小 代码行数 UltraEconomy.sk 37.3 KB (38,292 字节) 758行 如果你需要该脚本，可以联系我购买。价格为 255CNY 如有倒卖现象，请联系邮箱&#x61;&#100;&#x6d;&#x69;&#x6e;&#x40;&#x69;&#109;&#x30;&#111;&#46;&#x74;&#x6f;&#x70;，核实后我会追究到底๑乛△乛๑ 指令 玩家指令 正常情况下，ueco的货币与Vault、Playerpoints是不互通的。在安装本插件后，管理员需要通过/ueco admin globalset指令来开启互通。 开启互通后的截图如下： 可见开启互通后玩家的Help帮助提示也会新增可用的指令。 开启Playerpoints与Ueco的互通 Vault与Playerpoints都开启后的样子… 管理员指令 功能 基础的货币功能 玩家可以通过执行指令来查看自己的余额 玩家可以通过执行指令进行转账 玩家可以通过执行指令购买管理员上架的物品 对Vault的互通 玩家可以使用硬币（默认金融名）购买Vault的金钱 玩家可以使用Vault金钱购买硬币 玩家可以查看硬币与Vault的汇率 对PlayerPoints点券的互通 玩家可以使用硬币（默认金融名）购买点券 玩家可以使用点券购买硬币 玩家可以查看硬币与点券的汇率 高度自定义功能开关 管理员可以自定义开启各个金融之间的互通 管理员可以自定义开启各个金融互通时的功能 在关闭功能时玩家的帮助提示也会相应减少/增加 以下是管理员可以自定义的功能： 更改货币之间的汇率： 管理员可以更改Vault/PlayerPoints与硬币的汇率 开启/关闭Vault/Points与硬币之间的流通 开启/关闭玩家查看汇率的功能 开启/关闭玩家消耗Vault/Points买入硬币的功能 开启/关闭玩家抛售硬币获得Vault/Points的功能 自定义货币昵称与单位（提示信息也会随之修改） 自定义玩家初始资金 快速上手 安装脚本 请将脚本安装在2.3.7版本的Skript插件目录下/skripts/文件夹内 安装完毕后在服务端内输入/sk reload UltraEconomy即可 初始化设置 因为该脚本不会产生配置文件，且一切自定义是在游戏内进行操作，请按照以下流程进行脚本的初始化。 自定义你的货币名称首先，你需要给你自己的货币起个名字。当然，如果你懒得想，使用默认的硬币也可以。 需要注意的是，如果你准备开启货币与其他货币之间的流通，我还是建议你更改Vault与PlayerPoints的货币名，因为它们的默认名字就是VaultMoney与PlayerPoints 开启货币流通，更改汇率如果你想开启货币之间的流通，请务必要记的更改汇率。否则你的服务器就会出现1点券=1硬币=1游戏币的尴尬情况。当然，你也可以关闭抛售/买入功能来限制或阻止货币之间的流通。 设置初始，迎接玩家默认玩家初始的货币数为零，如果你希望玩家快速发展，可以适量设置一些初始资金，供玩家抛售/买入其他货币。 上架物品，流通货币本脚本已经自带了系统商店，管理员可以通过上架手中物品供玩家购买。 至此，你已经将UltraEconomy配置完毕，可以放玩家进来体验“钱生钱”的感觉啦~ 需要的插件与前置如果你要开启货币之间的流通，请务必安装以下插件： Vault，PlayerPoints，任意一个前置为Vault的经济插件（例如Ess），Skript 2.3，TabooSK","raw":null,"content":null,"categories":[{"name":"我的Skript旅途","slug":"我的Skript旅途","permalink":"https://blog.im0o.top/categories/%E6%88%91%E7%9A%84Skript%E6%97%85%E9%80%94/"}],"tags":[{"name":"Skript","slug":"Skript","permalink":"https://blog.im0o.top/tags/Skript/"}]},{"title":"JPEG与PNG图片隐藏信息传递术","slug":"JPEG与PNG图片隐藏信息传递术","date":"2019-12-22T03:27:52.000Z","updated":"2022-05-24T06:19:06.187Z","comments":true,"path":"posts/56d51092.html","link":"","permalink":"https://blog.im0o.top/posts/56d51092.html","excerpt":"前言最近在研究JPEG和PNG的文件格式，在其属性中包含了图片文件的分辨率（该分辨率值为所有图片显示工具显示这个图片时会显示的大小）。\n于是，我们可以通过更改图片显示的分辨率来隐藏图片的部分区域。从而达到隐藏传递信息的效果。","text":"前言最近在研究JPEG和PNG的文件格式，在其属性中包含了图片文件的分辨率（该分辨率值为所有图片显示工具显示这个图片时会显示的大小）。 于是，我们可以通过更改图片显示的分辨率来隐藏图片的部分区域。从而达到隐藏传递信息的效果。 开始操作PNG部分 这是一张普通的png格式的照片，我们可以通过编辑这张照片进行传递信息 编辑后可以修改图片的分辨率，在上面的图片中我们可以看到，这张图片的分辨率是1920*908像素 也就是图片的长度为1920像素，宽度为908像素。 接下来，打开Winhex1，将编辑好的图片拖入Winhex窗口中 将数据解释器设置为Big-Endian（设置方法：点击选项—数据解释器—将窗口右下角的Big-Endian打勾即可） 在PNG图片中，其分辨率位置总是在IHDR（ASCII码栏中的IHDR）的后8个字节，即图中选择的8个字节： 使用数据解释器点选到前四个字节的开头，其值为1920，这四个字节则为图片的宽度。我们主要需要修改的是后四个字节：高度 点选到后4个字节中，查看其值为908，这个值就是图片的高度。 在数据解释器中的32Bit栏中修改数值即可修改该图片的”显示“高度，将其修改为750（像素），保存后查看图片： 可以看到这张图片的高度被缩小了，先前添加的文字只剩下一点部分可以看见。 可能有人说了：这不就是剪切吗？ 接下来就是与剪切不同的地方了，因为图片的数据还在，只显示了1920*750的部分而已，我们将数值改回去看看会发生什么： 将显示大小更改为1920*1000后可以看见原来编辑的信息了。 JPEG图片部分这是一张jpg格式的文件，与png图片一样，我们在上面添加文字。 添加完毕后拖入Winhex，显示如下图： 在JPEG格式的文件中，有一个属性是也是显示分辨率，其标识为FF C0，更改下图中绿色的部分即可 （绿色部分为高度，蓝色部分为宽度，均为Big-Endian） 修改高度后的图片如下图（修改方法同PNG修改方法，即在数据解释器中修改数值，不过这里是2个字节，则在16bit栏中更改数字） 更改JPEG图片显示分辨率大小具体操作 以上为图片信息隐藏术，在发送图片的时候请注意要记得勾选**发送原图**哦，不是原图的话图片数据会比原图少，隐藏掉的部分也会消失哦 1.Winhex破解方法请前往 实用的数据恢复软件 ↩","raw":null,"content":null,"categories":[{"name":"一些教程","slug":"一些教程","permalink":"https://blog.im0o.top/categories/%E4%B8%80%E4%BA%9B%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"JPG文件","slug":"JPG文件","permalink":"https://blog.im0o.top/tags/JPG%E6%96%87%E4%BB%B6/"},{"name":"加密传输","slug":"加密传输","permalink":"https://blog.im0o.top/tags/%E5%8A%A0%E5%AF%86%E4%BC%A0%E8%BE%93/"},{"name":"小技巧","slug":"小技巧","permalink":"https://blog.im0o.top/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"}]},{"title":"使用Winhex进行数据恢复（3）","slug":"使用Winhex进行数据恢复（3）","date":"2019-11-28T07:23:53.000Z","updated":"2022-05-24T06:19:06.168Z","comments":true,"path":"posts/ea54819e.html","link":"","permalink":"https://blog.im0o.top/posts/ea54819e.html","excerpt":"前言现在，你已经学会了简单的修复MBR，迈出了数据恢复的第一步。接下来，我们将了解到 FAT32 格式的分区是如何工作的。\n\n你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件\n\n知识点总览\nFAT32分区构成\n实例：导出损坏分区FAT32中的文件\n实例：恢复FAT32分区（手动填写FAT32分区的DBR）\nEBR的组成\n","text":"前言现在，你已经学会了简单的修复MBR，迈出了数据恢复的第一步。接下来，我们将了解到 FAT32 格式的分区是如何工作的。 你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件 知识点总览 FAT32分区构成 实例：导出损坏分区FAT32中的文件 实例：恢复FAT32分区（手动填写FAT32分区的DBR） EBR的组成 FAT32 分区的构成​ FAT32 文件系统是从微软Windows 95 系统的 OSR2 版本开始使用的，它能够支持大于32MB小于32GB的分区。虽然第三方的格式化程序可以把超过32GB的分区格式化为FAT32，但微软自身的系统不允许将大于32GB的分区格式化为FAT32文件系统。 ​ FAT32文件系统由保留扇区（包含DBR以及其备份等），FAT表1，FAT表2，数据区四个部分组成，下图为其结构示意图： DBR及其保留扇区​ FAT32文件系统的DBR开始于其第一个扇区，由5个部分组成，分别为跳转指令、OEM代号、BPB、引导程序和结束标志，下图为一个完整的FAT32文件系统的DBR。 跳转指令跳转指令本身占用2字节，它将程序执行流程跳转到引导程序处。 当前DBR中的EB 58代表汇编语言中的JMP 58。需注意，该指令本身占用了2字节，计算跳转目标地址时应该以该指令的下一字节为基准，所以执行下一条指令应该位于5A处，紧接着跳转指令的是一条空指令NOP(90H)。 由此跳转指令中第二个字节内容可以知道OEM代号与BPB参数的大小，FAT32分区即为90开始向下5行+8个字节（如下图中选中部分）。 OEM代号这部分占8个字节，其内容有创建该文件系统的OEM厂商具体安排。当前DBR中的OEM代号为MSDOS5.0。 BPBFAT32的BPB从DBR的第12（0BH偏移处）个字节开始，占用79字节，记录了有关该文件系统的重要信息，其中各个参数的含义为： 字节偏移 字段长度（字节） 对应图中参数 字段内容及含义 0x0B 2 00 02 每扇区字节数 0x0D 1 20 每簇扇区数 0x0E 2 26 00 DOS保留扇区数 0x10 1 02 FAT表个数 0x11 2 00 00 未用 0x13 2 00 00 未用 0x15 1 F8 介质描述符（16进制） 0x16 2 00 00 未用 0x18 2 3F 00 每磁道扇区数 0x1A 2 FF 00 磁头数 0x1C 4 00 30 60 03 隐藏扇区 0x20 4 00 48 20 02 该分区的扇区总数 0x24 4 01 22 00 00 每FAT扇区数 0x28 2 00 00 标记 0x2A 2 00 00 版本 0x2C 4 02 00 00 00 根目录首簇号 0x30 2 01 00 文件系统信息扇区号 0x32 2 06 00 DBR备份扇区号 0x34 12 00 00 00 00 00 00 00 00 00 00 00 00 保留 0x40 1 80 BIOS驱动器号 0x41 1 00 未用 0x42 1 29 扩展引导标记 0x43 4 26 68 E5 DE 卷序列号 0x47 11 20 20 20 20 20 20 20 20 20 20 20 卷标 0x52 8 46 41 54 33 32 20 20 20 文件系统类型 下面对这些参数做详细分析： 0BH~0CH：每扇区字节数 记录每个逻辑扇区的大小，一般为512字节，但512不是固定值，该值可以由程序定义，合法值包括512、1024、2048和4096字节 0DH：每簇扇区数 每簇扇区数记录着文件系统的簇大小，即由多少个扇区组成一个簇1 FAT32最大支持128扇区的簇。 在FAT32文件系统中所有的簇从2开始编号，每个簇都有一个自己的地址编号，并且所有的簇都位于数据区内，在数据区之前是没有簇的。 0EH~0FH：DBR保留扇区数 DBR保留扇区数指DBR本身占用的扇区以及其后保留扇区的总和，也就是说DBR到FAT1之间的扇区总数，也可以说是FAT1的相对地址（相对于DBR）。 10H：FAT表个数 FAT个数描述了该文件系统中有几个FAT表，一般在FAT32文件系统中有2个FAT表，即FAT1和FAT2，FAT2是FAT1的备份。 11H~12H：未用 13H~14H：未用 15H：介质描述符 介质描述符是描述磁盘介质的参数，根据磁盘性质的不同，取不同的值2。 16H~17H：未用 18H~19H：每磁道扇区数 这是逻辑C/H/S中的一个参数，其值一般为63。 1AH~1BH：磁头数 这也是逻辑C/H/S中的一个参数，其值一般为255。 1CH~1FH：隐藏扇区数 隐藏扇区数是指本分区之前使用的扇区数，该值与分区表中描述的该分区的起始扇区号一致。对于主分区来讲，是MBR到该分区DBR之间的扇区数；对于扩展分区中的逻辑分区而言，是其EBR到DBR之间的扇区数3。 20H~23H：扇区总数 扇区总数是指分区的总扇区数，也就是说FAT32分区的大小。 24H~27H：每FAT扇区数 这四个字节用来记录FAT32分区中每个FAT表占用的扇区数。 28H~29H：标志 这两个字节用于表示FAT2是否可用，当其二进制最高位置为1时，表示只有FAT1可用，否则FAT2也可用。 2AH~2BH：版本 这两个字节通常为0。 2CH~2FH：根目录首簇号 分区在格式化FAT32文件系统时，格式化程序会在数据区中指派一个簇作为FAT32根目录区的开始，并把该簇号记录在BPB中。通常斗士把数据区的第一个簇分配给根目录使用，也就是2号簇。 30H~31H：文件系统信息扇区号 FAT32文件系统在DBR的保留扇区安排了一个文件系统信息扇区，用以记录数据区中空闲簇的数量及下一个空闲簇的簇号，该扇区一般在分区的1号扇区，即紧跟DBR后的一个扇区。 32H~33H：DBR备份扇区号 FAT32文件系统在DBR保留扇区中安排了一个DBR的备份，一般在6号扇区，也就是第7个扇区。该备份与原DBR的内容一摸一样，如果原DBR遭到破坏，可以用备份扇区修复。 34H~3FH：保留 40H：BIOS驱动器号 这是BIOS的INT 13H所描述的设备号码，一般把硬盘定义为8xH。 41H：未用 42H：扩展引导标记 扩展引导标记用来确认后面的三个参数是否有效，一般值为29H。 43H~46H：卷序列号 卷序列号是格式化程序在创建系统是生成的一组4个字节的随机数值。 47H~51H：卷标 卷标是由用户在创建文件系统时指定的一个卷的名称，但这是旧系统所记录的位置，现在的系统已经不再使用这个位置记录卷标，而是由一个目录项管理卷标。 52H~59H：文件系统类型 BPB的最后一个参数，直接用ASCII码记录当前分区的文件系统类型。 引导程序FAT32的DBR引导程序占用420字节（5AH~1FDH）），在Windows 98之前的系统之下，这段代码负责完成DOS三个系统的装入，在Windows 2000之后的系统中，其负责完成将系统文件NTLDR装入，对于一个没有安装操作系统的分区来讲，这段程序没啥用处… 结束标志DBR的结束标志与MBR、EBR的结束标志相同，都是55 AA。 FAT表FAT（File Allocation Table）即文件分配表，对于FAT文件系统来讲是非常重要的一个组成部分，其主要作用及特点如下： FAT文件系统一般有2个FAT表，FAT1是活动FAT，FAT2是备份。 FAT1的大小与FAT2相同，因此我们可以通过算出FAT1的大小在FAT2处跳转这么多到达数据区。 FAT表是由FAT表项构成的，我们把FAT表项简称为FAT项，每个FAT项的大小有32位（4字节）。 每个FAT项都有一个固定的编号，这个编号从0开始。也就是说，第一个FAT项为0号FAT项，第二个FAT项为1号FAT项，以此类推。 FAT表的前两个FAT项有专门的用途：0号FAT项用于存放分区所在的介质类型，例如硬盘的类型为“F8”，那么硬盘上分区的FAT表第一个FAT项就以“F8”开始；1号FAT项则用来存储文件系统的肮脏标志，表明文件系统被非法卸载或者磁盘表面存在错误。 分区中每一个簇的适应情况都会映射到FAT表中的唯一一个FAT项。因为0号FAT项和1号FAT项和1号FAT项有特殊用途，无法与数据区中的簇形成映射，因此，数据区中的第一个簇的编号对应FAT表中的2号FAT项，以此类推。 总的来说，FAT表是用来表示分区使用情况的一个部分，我们可以通过FAT表来计算FAT分区的大小。 上图为FAT32文件系统中的FAT1 数据区 数据区的位置FAT32的数据区在文件系统中的具体位置是紧跟在FAT2之后的。 以下为详细流程： ① 系统通过读取MBR中分区表的信息定位到该分区的DBR扇区； ② 读取 DBR 的0EH~0FH偏移处，得到DBR保留扇区数的值为38； ③ 读取 DBR 的24H~27H偏移处，得到FAT表大小的值为8705； ④ 用DBR保留扇区数+2*FAT表大小，结果等于17448，从DBR向后跳转17448扇区，这里就是数据区的开始。 数据区的内容FAT32文件系统数据区的内容主要由三个部分组成：根目录、子目录和文件内容。在数据中是以簇1为单位来管理这段空间的。 FAT32数据区根目录 目录项在FAT32文件系统下，分区根目录下的文件及文件夹的目录项存放在根目录区中，分区子目录下的文件及文件夹的目录项存放在子目录区中，根目录区和子目录区都在数据区中。 在FAT32文件系统中，目录项可以分为4类： 点击对应的文字可以直接跳转到对应内容 ① 短文件名目录项。 ② 长文件名目录项。 ③ .目录项和..目录项。 ④ 卷标目录项 1）短文件名目录项 上图是一条文件目录项，目录项占32字节，从Winhex中看（默认）是两行数据。 让我们来分析下这条目录项的含义： 字节偏移 字段长度（字节） 字段内容及含义 0x00 8 主文件名 0x08 3 文件的扩展名 0x0B 1 文件属性（读写/只读/隐藏/系统/卷标/子目录/存档） 0x0C 1 未用 0x0D 1 文件创建时间精确到 10ms 的值 0x0E 2 文件创建时间，包括时、分、秒 0x10 2 文件创建日期，包括年、月、日 0x12 2 文件最近访问日期，包括年、月、日 0x14 2 文件起始簇号高位（高位簇） 0x16 2 文件修改时间，包括时、分、秒 0x18 2 文件修改日期，包括年、月、日 0x1A 2 文件起始簇号的低位（低位簇） 0x1C 4 文件大小（字节） 00H~07H：主文件名共占8字节，如果文件名（不包含扩展名）用不完8字节，后面用空格填充4。图中主文件名为IM0O。 另外该位置的第一个字节也用来表示目录项的分配状态，当该字节是00时，表示该目录项从未使用过；当该字节是E5时，表示该目录项曾经使用过，但目前已经被删除。 08H~0AH：文件的扩展名 文件的扩展名共占3字节，文件夹没有扩展名，如果是文件夹的目录项，该位置会被空格填充。图中的扩展名为JPG。 0BH：文件属性5 文件属性占1字节（8bit），可以用来表示文件的各种属性。 &lt;&lt;返回目录项类型 2）长文件名目录项 上图为一个长文件名文件的目录项，图中长文件的文件名为System Volume Info... 示例文件名SHUJUHUIFU.txt 在Windows 95开始，文件名”8.3“格式的限制被打破了，文件名可以超过8个字符，并且可以使用中文了，扩展名也可以超过3字节，这种格式的文件名就称为长文件名。 在Windows 95以上的系统中，长文件名实际存储着两个名字，一个短文件名和一个长文件名。当创建一个长文件名时，其对应的短文件名有以下3个处理原则。 系统取长文件名的前6个字符加上~1形成短文件名，其扩展名不变； 图中取前六个字符SHUJUH 如果已存在这个名字的文件，则符号~后的数字自动增加； 例如：SHUJUH~1TXT与SHUJUH~2TXT 如果有DOS和Windows 3.x非法的字符，则以下划线_替代。 每个长文件名目录项也占用32字节，一个目录项作为长文件名目录项使用时，其属性字节值为0FH，能够存储13个字符，如果文件名很长，一个长文件名就需要多个目录项，这些目录项按倒序排列在其短文件名目录项之前。 如图中标明的顺序 字节偏移 字段长度（字节） 字段内容及含义 0x00 1 序列号 0x01 10 文件名的第1~5个Unicode码字符 0x0B 1 长文件名目录项的属性标志 0x0C 1 保留未用 0x0D 1 短文件名校验 0x0E 12 文件名的第6~11个Unicode码字符 0x1A 2 始终为0 0x1C 2 文件名的第12~13个Unicode码字符 序列号(00) 序列号占1字节，该参数用来描述长文件名目录项的排序。 在这个字节的8位中，0~4这5位用来描述长文件名目录项的顺序号，从1开始编号。6位（也就是说第7位）如果“1”表明该目录项是最后一项。如果文件删除，该字节也会改为E5。 文件名的第1~5个Unicode码字符 该参数长度为10字节（因为Unicode编码储存字符时每个字符占用2字节）。 如果文件名已经记录完，但该参数的空间中还有未用的字节，就会在文件名最后一个字节填充2个字节的00，随后未用的字节用FF填充。 长文件名目录项的属性标志 该参数长度为1字节，是属性字节。当属性的只读位、隐藏位、系统位、卷标位全为1，其它全为0是，改制就为16进制的0FH，表示该目录项为长文件名记录项。 未用 该字节不使用。 短文件名校验和 该参数长度为 1 字节，是个校验和，长文件名目录项通过这个校验和将其与相应的短文件名目录项关联起来。校验和的数值是使用短文件名计算得到，同 文件的长文件名目录项的校验和必须是相 向的。校验和的计算方法是依次将短文件名的各个字符对应的二进制值相加，在每一步相加前要先将二进制的结果值依次向右移动一位，最右边的位循环移动到最左边，然后再加上下一个字符所对应的二进制值，直到把最后一个字符加完，结果就是校验和的数值。 文件名的第6~11个字符 同[2.] ③号长文件名目录项的首字节为42H，换算为二进制等于01000010，其0~4位的值为00010，说明这是第二个长文件名目录项，6位上的值是1，说明这是最后一项长文件名目录项。 ②、③两条长文件名目录项的结构一样，以倒序的方式排列在其短文件名目录项之前，完整地记录了文件名shujuhuifu.txt &lt;&lt;返回目录项类型 3）.目录项和..目录项 在子目录所在的文件目录项区域中，总有两个特殊的目录，它们就是.和.. 使用DOS命令dir可以看到这两个目录 ① .表示当前目录 ② ..表示上级目录 在winhex中查看.目录与..目录的目录项： 其中0x00H0x1FH为.目录的目录项，0x20H0x3FH为..目录的目录项 图为两个目录项的在模板管理器中的效果 从这两个目录项的实际数据可以得知： .目录项所描述的起始簇号是子目录本身所在的簇号。 ..目录项所描述的起始簇号是上级目录的起始簇号，如果上级目录是根目录，则该值为0。 所有目录的文件大小都是0。 &lt;&lt;返回目录项类型 4）卷标目录项 卷标就是一个分区的名字，可以在格式化分区时创建，也可以随时修改。 ① 对于FAT格式的分区，卷标的长度最多为11字节，若果卷标为中文，则最多支持5个字符。 ② 卷标的目录项中不记录簇号和大小。 ③ 卷标的目录项中不记录创建时间和最后访问时间，只记录修改时间。 &lt;&lt;返回目录项类型 实例：导出损坏分区FAT32中的文件 导入题目FAT32-19123.vhd后用Winhex打开 题库/FAT32-19123 填写结束标志，跳转到FAT32分区 首先填写MBR主引导记录所缺失的结束标志55 AA。接着查看分区表中的第一个分区，并跳转到该分区。 从残留的DBR中，可以看出该分区为FAT32，其每簇扇区数为32 向下搜索!00 使用快捷键Ctrl+Alt+x向下搜索16进制数值!00（非零），可以搜索到根目录。 在根目录中发现需要找到的文件，查看其高位簇，低位簇（位置）和大小，导出文件即可 box.png在3号簇，大小为3,752字节 box.txt在4号簇，大小为283字节 跳转到对应位置后选中对应大小，右键&gt;&gt;编辑&gt;&gt;复制选快&gt;&gt;至新文件 导出文件步骤（gif有录制时有点问题） > 在本题中有一道附加题，即恢复分区2。 实例：恢复FAT32分区（手动填写FAT32分区的DBR） 导入题目FAT32-191226.vhd后用Winhex打开 题库/FAT32-191226 填写结束标志55 AA，向下搜索非0，确定分区类型与DBR位置 打开虚拟磁盘后，我们发现MBR的分区表和结束标志被清空，首先，填写结束标志55 AA。 保存后重新加载虚拟磁盘，点选到00处，向下搜索非零。 根据FAT32分区的特征：RRaA，可以判断处该扇区前一个扇区为FAT32分区的DBR。 计算FAT32分区所必须的数值 计算FAT32分区保留区大小在FAT32分区头部有一部分区域为保留区，在填写DBR时我们需要填写保留区大小值，所以我们需要计算保留区的大小。 向下搜索F8FF F8FF为FAT文件系统中FAT表的标识，我们通过找到FAT表的位置后将FAT表位置减去DBR位置得到保留区大小 复制FAT表位置 2086 复制DBR位置 2048 用FAT表位置减去DBR位置得到保留区大小为 38 计算FAT32分区FAT表大小填写DBR时还需要填写FAT表的大小，那么如何计算FAT表的大小呢？ 记录FAT1的位置2086，向下搜索F8FF FAT1与FAT2的标识符均为F8FF，用FAT2的位置减去FAT1的位置即可得到FAT表的大小 记录FAT2的位置27687 用FAT2的位置减去FAT1的位置得到FAT表的大小为25601 计算FAT32分区每簇扇区数 跳转到数据区 从FAT2向后跳转FAT表大小即可达到数据区 记录数据区的位置：53288，该位置为根目录（数据区中的首个扇区） 点击空余处，向下搜索非0，搜索到下一簇的目录，位置为53416 用相邻的子目录的位置减去根目录的位置得到每簇扇区数为128 计算FAT32分区大小得到以上参数后我们就可以计算最后需要填写到DBR内的参数——分区大小 （FAT表大小-1）x128x每簇扇区数+保留区大小即可得到该分区的大小。 需注意，这个大小会比分区时的分区大小稍小一点，不过不影响分区中的文件（除非你用满了整个分区） 通过计算，我们得到该FAT分区的大小为419430438扇区 填写DBR 填写跳转指令EB 58 90 在DBR扇区起始处填写FAT32分区的跳转指令 填写每扇区字节数 512 在0x0B处（2字节）填写每扇区字节数，默认为512 填写每簇扇区数128 在0x0D处（1字节）填写每簇扇区数，本题为128 填写保留区大小38 在0x0E处（2字节）填写保留区大小，本题为38 填写FAT表个数2 在0x10处（4字节）填写FAT表个数，默认为2 填写磁盘介质F8 在0x15处（1字节）填写磁盘介质，默认为F8 填写分区位置2048 在0x1C处（4字节）填写分区位置，本题为2048 填写分区大小419430438 在0x20处（4字节）填写分区大小，本题为419430438 填写FAT表大小25601 在0x24处（4字节）填写FAT表大小，本题为25601 填写根目录首簇号2 在0x2C处（4字节）填写根目录首簇号，默认为2 填写文件系统标识FAT32(ASCII) 在0x52处填写文件系统标识，在ASCII栏处直接填写FAT32即可 填写结束标志55 AA 在扇区结尾处填写55 AA结束标志 下图为填写FAT32文件系统DBR全过程。 至此，你已经恢复了分区1 从DBR向后跳转分区大小，恢复分区2 恢复分区2的步骤与分区1相同 EBR的组成在上篇文章中我们了解到了扩展分区的结构，以及其在整个磁盘中的作用。本节我们将了解EBR具体的组成。 可以看到，EBR中含有与MBR主引导记录中相似的分区表，通常最多有两个分区表项。 第一个分区表项类同与MBR主引导记录中的分区表格式，不过需要注意的是：扩展分区中的逻辑分区无法成为活动分区。 第二个分区表项用来链接下一个EBR扇区，下图为一个扩展分区的结构 从上图中可以看出，逻辑分区后无扩展分区的情况时，逻辑分区前的扩展分区无第二个分区表项 分区表项1的作用同等于MBR中的分区表项，所以在这里我们查看分区表项2 所谓扩展分区，严格地讲它不是一个实际意义的分区，它仅仅是一个指向下一个用来定义分区的参数的指针，这种指针结构形成一个单向链表。 扩展分区的分区表项2是用来指向下一个EBR的位置与大小。 下图为一个磁盘的 EBR 结构。 需要注意的是：EBR 中的位置参数均是以 EBR1（扩展分区的首位置）相对偏移的位置。 图床404 部分图片丢失无法找回 博客已根据现有图片进行部分内容修改 部分无法找回的图片丢失 1.分区中的簇：文档 ↩2.磁盘介质描述符：文档 ↩3.不过该值不严谨，填写时可以直接填其绝对位置 ↩4.空格在16进制中的数值为20H ↩5.FAT32目录项的文件属性：文档 ↩","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"FAT32","slug":"FAT32","permalink":"https://blog.im0o.top/tags/FAT32/"}]},{"title":"实用的数据恢复软件","slug":"实用的数据恢复软件","date":"2019-11-24T07:50:27.000Z","updated":"2022-05-24T06:19:06.148Z","comments":true,"path":"posts/102848cd.html","link":"","permalink":"https://blog.im0o.top/posts/102848cd.html","excerpt":"前言在数据恢复的过程中，我们常常需要使用不同的工具，以下是我常用的数据恢复软件\n\nDiskGenius\nWinhex\nR-Studio\n\n\n\n一张写博客时喝的饮料的照片，没啥意义…（元气森林记得打钱啊）\n\n\n","text":"前言在数据恢复的过程中，我们常常需要使用不同的工具，以下是我常用的数据恢复软件 DiskGenius Winhex R-Studio 一张写博客时喝的饮料的照片，没啥意义…（元气森林记得打钱啊） DiskGenius 专业版 软件名称：DiskGenius 软件大小：33.4MB 更新时间：2019-11-26 ​ DiskGenius是一款硬盘分区及数据恢复软件。它是在最初的DOS版的基础上开发而成的。Windows版本的DiskGenius软件，除了继承并增强了DOS版的大部分功能外(少部分没有实现的功能将会陆续加入)，还增加了许多新的功能。如：已删除文件恢复、分区复制、分区备份、硬盘复制等功能。另外还增加了对VMWare、Virtual PC、VirtualBox虚拟硬盘的支持。更多功能正在制作并在不断完善中 DG是一款方便的分区工具，支持2种分区结构（MBR与GPT），在专业版的DG中，支持组建RAID等功能。 &#160; DiskGenius 破解版下载地址（百度网盘）：链接： 点击下载 密码：im0o &#160; 安装密码：im0o.top Winhex 软件名称：Winhex 软件大小：8.6MB 软件版本：19.6-SR2 x64 ​ winhex 是一个专门用来对付各种日常紧急情况的工具。它可以用来检查和修复各种文件、恢复删除文件、硬盘损坏造成的数据丢失等。同时它还可以让你看到其他程序隐藏起来的文件和数据。总体来说是一款非常不错的 16 进制编辑器。得到 ZDNetSoftwareLibrary 五星级最高评价，拥有强大的系统效用。 Winhex是主要的数据恢复软件，通过其16进制编辑器，我们可以恢复分区/导出文件等。 注册 Winhex点击菜单栏中的帮助——注册，将代码块中的内容粘贴到窗口内即可 Key123456Name: &quot;WinHex 19.6-SR2&quot;Addr1: &quot;Specialist License&quot;Addr2: &quot;Only valid for this version&quot;Data: &quot;B884E8CE836E7A3EC70F2DA7F0D7B9F8&quot;Key: &quot;B6E03D26307E5A7700F3F04C8429A25B&quot;Cksm: &quot;FD37FCFB&quot; R-Studio 软件名称：R-Studio 软件大小：148MB 软件版本：R-STUDIO Network 8.9.173593 R-Studio是一个功能强大、节省成本的反删除和数据恢复软件系列。它采用独特的数据恢复新技术，为恢复FAT12/16/32、NTFS、NTFS5（由 Windows 2000/XP/2003/Vista/Windows 8/Windows 10创建或更新）、Ext2FS/Ext3FS（OSX LINUX 文件系统）以及 UFS1/UFS2（FreeBSD/OpenBSD/NetBSD文件系统）分区的文件提供了最为广泛的数据恢复解决方案。为用户挽回数据，减少数据丢失造成的损失。 通过配合R-Studio的扫描，可以找到误Ghost前的分区碎片，以便于恢复其他分区。（也可以扫描全盘导出文件） R-Studio 注册版下载（百度网盘）：链接：https://eyun.baidu.com/s/3dGJnO45 密码：im0o","raw":null,"content":null,"categories":[],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"DiskGenius","slug":"DiskGenius","permalink":"https://blog.im0o.top/tags/DiskGenius/"},{"name":"R-Studio","slug":"R-Studio","permalink":"https://blog.im0o.top/tags/R-Studio/"}]},{"title":"Winhex数据恢复题库","slug":"Winhex数据恢复题库","date":"2019-11-20T02:56:19.000Z","updated":"2022-05-24T06:19:06.178Z","comments":true,"path":"posts/3df005df.html","link":"","permalink":"https://blog.im0o.top/posts/3df005df.html","excerpt":"由于 Baklib 不再内测，不再对题库进行支持，该题库不再更新，并且内容随时可能丢失\n新题库请前往 https://im0o.top/winhex-tiku/ 查看\n\n\n&emsp;题库地址\n\n\n感谢 Baklib.com 提供的免费文档站点\n访问该站点需要输入题库密码，密码即为博客主页链接（不含http://）\n\n教程例题\n点击访问\n\n其他题目\n点击访问\n\n题库密码\n因baklib服务器宕机，题库关闭。新题库请前往文章：\n\n\n\n\n题库使用方法请点击阅读全文进行查看\n","text":"由于 Baklib 不再内测，不再对题库进行支持，该题库不再更新，并且内容随时可能丢失 新题库请前往 https://im0o.top/winhex-tiku/ 查看 &emsp;题库地址 感谢 Baklib.com 提供的免费文档站点 访问该站点需要输入题库密码，密码即为博客主页链接（不含http://） 教程例题 点击访问 其他题目 点击访问 题库密码 因baklib服务器宕机，题库关闭。新题库请前往文章： 题库使用方法请点击阅读全文进行查看 题库使用方法 在**Baklib题库**下载题目 打开Windows磁盘管理（右键计算机点击管理） 右键磁盘管理，点击附加 VHD 选择对应的题目路径 附加VHD后即可打开Winhex，选择对应的虚拟磁盘进行数据恢复。 做题后分离VHD文件 VHD为虚拟磁盘文件，在虚拟磁盘的分区中存放的文件实际将占用VHD文件的大小（动态扩展） 右键磁盘，点击分离VHD即可，如果您不希望题目占用您的存储空间，在分离时可以勾选删除磁盘后删除虚拟磁盘文件选项以快捷删除VHD文件","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"baklib","slug":"baklib","permalink":"https://blog.im0o.top/tags/baklib/"}]},{"title":"使用Winhex进行数据恢复（2）","slug":"使用Winhex进行数据恢复（2）","date":"2019-11-17T03:44:41.000Z","updated":"2022-05-24T06:19:06.168Z","comments":true,"path":"posts/52e8e6fb.html","link":"","permalink":"https://blog.im0o.top/posts/52e8e6fb.html","excerpt":"前言在上一篇文章后，我们了解到了Winhex是什么，以及Winhex的快捷键等。\n本篇，我们将正式使用Winhex进行简单的分区恢复。\n\n你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件\n\n知识点总览\nWinhex 窗口使用介绍\n实例：填写MBR\n什么是 DBR\n主分区与扩展分区\n","text":"前言在上一篇文章后，我们了解到了Winhex是什么，以及Winhex的快捷键等。 本篇，我们将正式使用Winhex进行简单的分区恢复。 你可以在 https://im0o.top/winhex-tiku/ 中查看所有例题文件 知识点总览 Winhex 窗口使用介绍 实例：填写MBR 什么是 DBR 主分区与扩展分区 Winhex窗口使用介绍 文件类功能 功能名称 作用 新建 新建一个文件（可以自定义大小，导出文件时可以自定义扩展名） 打开 打开一个文件 保存 保存更改 创建磁盘镜像 为一个分区/磁盘创建镜像 打印 将范围内的二进制数据导出为*.xps格式的文档 属性 查看一个文件的属性 打开文件夹 打开一个文件夹进行编辑 编辑类功能 功能名称 作用 撤销 撤销上一次的操作 复制选区 复制选定的区域 粘贴选区 将刚刚复制的内容粘贴 写入剪贴板 将剪贴板的数据写入 叠加扇区 叠加扇区 修改数据 对选定的数据批量操作（动刀子） 查找类功能 功能名称 作用 同步搜索 高级搜索 查找文本 查找ASCII/Unicode等其他格式的文本 查找十六进制数值 查找16进制格式的数值 替换文本 查找并替换ASCII/Unicode等其他格式的文本 替换十六进制数值 查找并替换16进制格式的数值 跳转类功能 功能名称 作用 转到偏移量 转到相对位置 跳至扇区 转到绝对位置 向前 转到上一个光标所在的位置 向后 转到后一个光标所在的位置 其他功能 功能名称 作用 打开磁盘 在Winhex中打开一个磁盘/分区进行编辑 克隆磁盘 克隆一个磁盘 打开RAM 打开RAM内存 计算器 打开计算机基带软件——计算器 分析选快 分析选中的区域 进行磁盘快照 对磁盘进行磁盘快照 Mount as Drive Letter (空) 设置项 功能名称 作用 常规设置 打开常规设置菜单 目录浏览器 打开目录浏览器设置菜单 减小一列 减小16进制编辑器中显示的一列（默认16列，不会更改分区/磁盘大小） 增大一列 增加16进制编辑器中显示的一列 内容 Winhex帮助，打开时会提示“是否打开” 工具：数据解释器 数据解释器是Winhex中比较重要的一个工具，你可以通过点击某字节/某字节组的头看到这（几）个字节的数值大小。 如何打开数据解释器？ 在WinHex中，数据解释器默认会一直存在，如果你不小心关闭了它，可以在【查看】–【显示】–【数据解释器】中打开它（如图） 使用数据解释器 如图，黄色部分则为16进制（Little-Endian）数值，红色部分则为前方黄色部分的数值，FF则为例子填充。 当点击字节时，数据解释器默认会以Little-Endian显示从光标开始（包括光标所在字节）向后3个字节的数值大小，8Bit栏为1个字节，16Bit栏为2个字节，32Bit栏为4个字节。 数据解释器可以在【选项】–【数据解释器】中修改（快捷键：Alt+F5） 打开后的界面如下： 实例：填写MBR 导入题目 MBR.vhd 后使用Winhex打开： MBR.vhd 0 填写0扇区中的结束标志：55 AA 观察0扇区后面的几个扇区，发现是这个虚拟磁盘的分区结构是MBR分区结构 填写完结束标志后保存并关闭，重新打开虚拟磁盘 寻找第一个分区 可以通过多种方法寻找到第一个分区，这里举例两种方法： 通过位置管理器跳转到第一个分区​ 如果你能够像图中在位置管理器中看到第一个分区，可以直接点击该分区跳转到该分区的DBR处 通过搜索结束标志​ 你可以搜索每个扇区结尾2字节的55 AA（结束标志）来找到分区的DBR，如果55 AA被删除了，就无法通过该方法找到DBR 通过搜索非零​ 你可以在MBR主引导记录后的空闲扇区中向下搜索!00（非零）找到DBR，在本例题中，你需要进行搜索非零或直接通过导航跳转。 记录DBR的信息打开记事本，记录DBR的信息，一般的记录格式为： | 分区类型1| 分区地址 | 分区大小 | 如果该分区是 FAT32 类型，则记录格式为： | 分区类型 | 分区地址 | 分区大小 | 保留区大小 | FAT表大小 | 每簇扇区数 | 如果该分区是扩展分区2，则记录格式为： | 分区类型（05） | EBR地址 | 分区类型 | ……（同上） 记录格式只是为了方便分区的恢复与数据的填写，这玩意……怎么顺手怎么来吧。 查看该分区的位置与大小​ 如上图，在黄色标记处为该分区的绝对位置，红色标记处为该分区的大小，通过点击4个字节中的第一个字节，可以在数据解释器中看到位置和大小的数据。图中的分区为NTFS分区，其位置的16进制数值为00 08 00 00；其分区大小数值为FF 07 A0 00，换算为Big-Endian为00 00 08 00 和00 A0 07 FF其值为2048 和10487807。 填写数值将刚刚找到的数值填入记事本（如下图） 接着，从该分区的 DBR 向后跳转其分区大小10487807即可转到该分区的备份 下图为该分区跳转示意图 由跳转图我们可以知道，NTFS分区DBR中描述的分区大小不包括NTFS分区的备份，所以最后填写到MBR主引导记录中的分区大小要比记录的大小+1 在第一个分区的备份后即为第二个分区的DBR，重复上述的步骤，得到以下数据。 填写MBR 跳转到0扇区后，填写主引导记录中的分区表。 在填写分区表前，我们需要了解分区表结构： 字节偏移 字段长度 值 字段名定义 0x01BE 1字节 0x80 引导标志：指明该分区是否为活动分区 0x01BF 1字节 0x20 开始磁头 0x01C2 1字节 0x07 分区类型描述 0x01C6 4字节 0x00008000 分区起始扇区 0x01CA 4字节 0x0C800800 分区大小 实际需要填写的内容为上表中加粗的部分，将记事本中的内容填入分区表。 填完之后的效果： Ctrl+S保存后进入计算机管理——存储——磁盘管理中刷新虚拟分区 如果你看到的是图中的效果，那么恭喜你，你成功恢复了这4个分区 什么是DBRDBR（DOS BOOT RECORD），分区引导扇区，是由FORMAT高级格式化命令写到该扇区的内容，DBR是由硬盘的MBR装载的程序段。DBR装入内存后，即开始执行该引导程序段，其主要功能是完成操作系统的自举并将控制权交给操作系统。每个分区都有引导扇区，但只有被设为活动分区的DBR才会被MBR装入内存运行。 DBR一般位于一个分区的分区头，是这个分区的开始。各个分区的DBR结构也会有所不同，若将分区的DBR删除，则系统将无法识别这个分区（即会显示为RAW） 一般情况下，分区的DBR会有其备份，例： 分区类型 备份偏移地址 NTFS 分区结束后1个扇区 FAT32 DBR后6个扇区 ExFAT DBR后12个扇区 图为FAT32从DBR向后跳转了6个扇区到达备份 主分区与扩展分区主分区MBR磁盘的分区形式一般有3种：主分区，扩展分区和非DOS分区3。主分区又被称为主DOS分区，目前也称为主磁盘分区。 为了便于用户对磁盘的管理，操作系统引用了分区的概念，即将一块磁盘逻辑划分为几个区域。在分区表的64字节中，以16个字节为一个分区表项来描述一个分区的结构。 一块硬盘中可以有多个主磁盘分区，被激活的主磁盘分区称为活动分区，活动分区在一块分区中只能有一个。 扩展分区在了解扩展分区之前，我们先看看MBR中分区表的结构： 图中加黑部分为MBR主引导记录中的分区表，分区表被分为了4个主分区表项，这就意味着，在MBR分区结构中只能存在4个主分区表项，即4个主分区。那我们如何分出4个以上的分区呢？ 使用分区工具DiskGenius的快速分区功能，我们可以看到 可以看到高级设置中分区的最右方有主分区选项，当我们把分区数目选择为4个分区以上时，再视图将所有分区设置为主分区，可以看到这样的效果 只能将3个分区分配成主分区，剩下两个分区无法设置成分配为主分区，当我们点击确定后，该磁盘将被分成5个分区 请务必在虚拟磁盘上执行该操作！格式化之前请注意不要格成自己的硬盘，以免造成数据丢失！ 格式化后可以在DiskGenius中看到分区情况 可以看到虚拟磁盘被分为了3个主分区和一个扩展分区，扩展分区内包含了两个分区。 再在Winhex中打开该虚拟磁盘查看它的分区表 可以观察到扩展分区的标识符是 0F，通过数据解释器可以看出其大小为41,934,848，约为20GB，即为2个分区（L:和J:）的大小。 接下来跳转到扩展分区的位置，查看它的“DBR” 可以观察到，扩展分区的“DBR”类似于MBR，拥有分区表，里面指向了两个分区。 由此可见，扩展分区严格意义上并不算是一个分区，它的作用仅仅是指向后面的分区。 因此，我们给扩展分区的“DBR”定义了一个专属的名字：EBR（Extended Boot Record） 在扩展分区内的分区也有专属的称呼：逻辑分区 下图为MBR指向扩展分区的流程： 0.点这里访问本题地址 ↩1.点这里查看（近乎）所有的分区类型标识符 ↩2.扩展分区仅在MBR结构分区中存在，将在以后的教程讲到。 ↩3.一般情况为启动盘 ↩","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"恢复分区","slug":"恢复分区","permalink":"https://blog.im0o.top/tags/%E6%81%A2%E5%A4%8D%E5%88%86%E5%8C%BA/"}]},{"title":"使用Winhex进行数据恢复（1）","slug":"使用Winhex进行数据恢复（1）","date":"2019-11-13T01:39:51.000Z","updated":"2022-05-24T06:19:06.167Z","comments":true,"path":"posts/405d4915.html","link":"","permalink":"https://blog.im0o.top/posts/405d4915.html","excerpt":"前言我看过太多人因为没有做好数据备份或误操作，而把数据丢失的情况。\n比如因为病毒的破坏导致文件丢失、打不开、或者成为乱码。\n因为某数字安全卫士修复系统漏洞导致电脑无法启动，修复引导后电脑数据硬盘提示需要初始化。\n因为一次重装系统，导致所有数据分区被误格式化为一个系统分区等。\n本系列教程将介绍如何使用Winhex进行逻辑层面的数据恢复与文件修复。\n\n你可以在 这里 中查看所有例题文件\n你可以在 这里 找到该教程的索引\n\n知识点总览\nWinhex 是什么\nWinhex 的常用快捷键\nMBR主引导记录\nwindows系统常用的分区简述\n","text":"前言我看过太多人因为没有做好数据备份或误操作，而把数据丢失的情况。 比如因为病毒的破坏导致文件丢失、打不开、或者成为乱码。 因为某数字安全卫士修复系统漏洞导致电脑无法启动，修复引导后电脑数据硬盘提示需要初始化。 因为一次重装系统，导致所有数据分区被误格式化为一个系统分区等。 本系列教程将介绍如何使用Winhex进行逻辑层面的数据恢复与文件修复。 你可以在 这里 中查看所有例题文件 你可以在 这里 找到该教程的索引 知识点总览 Winhex 是什么 Winhex 的常用快捷键 MBR主引导记录 windows系统常用的分区简述 Winhex是什么？简单来讲，Winhex是一个16进制的窗口型编辑器，它专门用来检查和修复文件、恢复删除文件、硬盘损坏、数码相机卡损坏造成的数据丢失等…… 当然，它也能够用来人为损坏文件（笑） Winhex的常用快捷键以下是使用Winhex进行数据恢复时常用的快捷键： 快捷键 作用 Ctrl+Shift+N 导出（复制）文件 Ctrl+Alt+X 查找16进制数值 Ctrl+F 查找文本 Ctrl+W 关闭当前页面 Ctrl+G 跳至扇区 Ctrl+C 复制 Ctrl+B 粘贴 Ctrl+T 编辑选中内容（异或等） Alt+Tab 切换窗口（Windows快捷键） Alt+G 转到偏移量 Enter 打开启动中心 F3 继续上一次的搜索 MBR主引导记录MBR主引导记录通常在分区的开头（0扇区处）。其作用为指向分区的DBR/EBR MBR主引导记录主要有以下部分构成 引导程序 引导程序占用MBR的前440字节，其地址在偏移0~偏移1B7H处。 Windows磁盘签名 Windows磁盘标签占用引导程序后的4个字节，是Windows系统对初始化硬盘写入的一个磁盘标签 Disk Signature (磁盘签名)磁盘签名用于在操作系统上标识磁盘。Windows 要求磁盘在使用之前必须有一个签名。将签名写入磁盘后，该磁盘将显示为基本磁盘。 分区表 偏移1BEH~偏移1FDH的64字节为硬盘分区表，这是MBR分区中非常重要的结构。 结束标志 扇区最后的两个字节“55 AA”是MBR的结束标志，如果丢失了55 AA，计算机将无法识别出MBR （这也是最简单的故障）。 只有通过分区表才可以指向所有的分区，分区表由以下值构成 字节偏移 字段长度 值 字段名定义 0x01BE 1字节 0x80 引导标志：指明该分区是否为活动分区 0x01BF 1字节 0x20 开始磁头 0x01C2 1字节 0x07 分区类型描述 0x01C6 4字节 0x00008000 分区起始扇区 0x01CA 4字节 0x0C800800 分区大小 注意：上表中超过1字节的数据都是以 BIG-ENDIAN（即从低位到高位）的方式显示，因为Windows系统是运行在x86架构之上的，所以在实际存储时是按低位到高位存储的，两者表现不同。 LITTLE-ENDIAN（小字节序、低字节序）,即低位字节排放在内存的低地址端，高位字节排放在内存的高地址端。 与之对应的是：BIG-ENDIAN（大字节序、高字节序） ——百度百科","raw":null,"content":null,"categories":[{"name":"Winhex数据恢复教程","slug":"Winhex数据恢复教程","permalink":"https://blog.im0o.top/categories/Winhex%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Winhex","slug":"Winhex","permalink":"https://blog.im0o.top/tags/Winhex/"},{"name":"数据恢复","slug":"数据恢复","permalink":"https://blog.im0o.top/tags/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D/"},{"name":"Windows系统","slug":"Windows系统","permalink":"https://blog.im0o.top/tags/Windows%E7%B3%BB%E7%BB%9F/"}]},{"title":"ThownFireball -- 丢出火焰弹","slug":"ThownFireball-丢出火焰弹","date":"2019-08-03T13:31:30.000Z","updated":"2021-08-09T01:00:41.366Z","comments":true,"path":"posts/566520c1.html","link":"","permalink":"https://blog.im0o.top/posts/566520c1.html","excerpt":"简介为了增加游戏趣味性，与一直感叹火焰弹为何无法丢出的问题，我利用最近正在学习的Skript插件写出了一个简单的脚本\n——ThownFireball\n功能当玩家手持火焰弹并Shift右键时会丢出这个火焰弹（效果等同于恶魂吐出的火球，并且可以完成进度/成就“见鬼去吧”（用一个火球打败恶魂）\n丢出火球后，玩家会获得虚弱的debuff\n（buff时长可以叠加）","text":"简介为了增加游戏趣味性，与一直感叹火焰弹为何无法丢出的问题，我利用最近正在学习的Skript插件写出了一个简单的脚本 ——ThownFireball 功能当玩家手持火焰弹并Shift右键时会丢出这个火焰弹（效果等同于恶魂吐出的火球，并且可以完成进度/成就“见鬼去吧”（用一个火球打败恶魂） 丢出火球后，玩家会获得虚弱的debuff （buff时长可以叠加） 源码12345678910111213141516171819202122options: #冷却时间 cooldown: 3 seconds #虚弱时间 debufftimes: 5 secondson right click with a fire charge: if player is sneaking: set &#123;_cooldown&#125; to difference between &#123;cd.%player%.fireball&#125; and now if &#123;_cooldown&#125; is less than &#123;@cooldown&#125;: send action bar &quot;&amp;c&amp;l火焰弹冷却中&quot; to player stop else: remove a fire charge from player&#x27;s inventory shoot a fireball from the player with speed 0.001 apply weakness of tier 2 to the player for &#123;@debufftimes&#125; set &#123;cd.%player%.fireball&#125; to now else: stopon load: send &quot;[ThrownFireball] &amp;b丢出火焰弹 &amp;a已加载&quot; to consoleon unload: send &quot;[ThrownFireball] &amp;b丢出火焰弹 &amp;c已卸载&quot; to console 下载地址1（百度网盘） 链接：http://tonancos.com/3efK 密码：im0o 地址2（本地下载） 链接：http://im0o.top/assets/download/ThrownFireball.sk Q.关于广告 A.作者也是要恰饭的嘛 后记本脚本源码已发布至Minecraft插件百科中的Skript目录内，欢迎查阅。 地址：http://mineplugin.org/Skript 支持作者你可以通过点击下方的“赞赏”按钮来支持我~ 感谢支持","raw":null,"content":null,"categories":[{"name":"我的Skript旅途","slug":"我的Skript旅途","permalink":"https://blog.im0o.top/categories/%E6%88%91%E7%9A%84Skript%E6%97%85%E9%80%94/"}],"tags":[{"name":"Skript","slug":"Skript","permalink":"https://blog.im0o.top/tags/Skript/"}]},{"title":"GoldenMelon -- 可以吃的金西瓜","slug":"GoldenMelon-可以吃的金西瓜","date":"2019-08-03T13:31:22.000Z","updated":"2021-08-09T00:57:42.332Z","comments":true,"path":"posts/4018ab83.html","link":"","permalink":"https://blog.im0o.top/posts/4018ab83.html","excerpt":"简介在UHC极限生存中，为了简化一些难度，我和朋友商量写出了这个脚本——GoldenMelon\n功能当右键金西瓜的时候，玩家会获得失明效果与生命恢复效果，并且会消耗1个金西瓜，进入冷却\n注：生命恢复效果与失明效果可以设置持续时间，效果可以叠加","text":"简介在UHC极限生存中，为了简化一些难度，我和朋友商量写出了这个脚本——GoldenMelon 功能当右键金西瓜的时候，玩家会获得失明效果与生命恢复效果，并且会消耗1个金西瓜，进入冷却 注：生命恢复效果与失明效果可以设置持续时间，效果可以叠加 源码123456789101112131415161718192021222324252627options: #单次回血等级 regain: 2 #buff持续时间 time: 2 seconds #单次饱食度恢复 beefs: 1 #两次之间的冷却 cooldown: 5 seconds #失明时间 debufftime: 10 secondson right click with a gold melon: set &#123;_cd&#125; to difference between &#123;cd.%player%.melon&#125; and now if &#123;_cd&#125; is less than &#123;@cooldown&#125;: send action bar &quot;&amp;6&amp;l这个食物还在冷却中!&quot; to player stop else: remove a gold melon from player&#x27;s inventory apply regeneration of tier &#123;@regain&#125; to the player for &#123;@time&#125; apply blindness of tier 2 to the player for &#123;@debufftime&#125; feed the player by &#123;@beefs&#125; beefs set &#123;cd.%player%.melon&#125; to nowon load: send &quot;[GoldenMelon] &amp;e可食用的金西瓜 &amp;a已加载&quot; to consoleon unload: send &quot;[GoldenMelon] &amp;e可食用的金西瓜 &amp;c已卸载&quot; to console 下载地址1（百度网盘）： 链接：http://tonancos.com/3efs 密码：im0o 地址2（本地下载）： 链接：http://im0o.top/assets/download/GoldenMelon.sk Q.关于广告 A.作者也是要恰饭的嘛 支持作者你可以通过点击下方的“赞赏”按钮来支持我~ 感谢支持","raw":null,"content":null,"categories":[{"name":"我的Skript旅途","slug":"我的Skript旅途","permalink":"https://blog.im0o.top/categories/%E6%88%91%E7%9A%84Skript%E6%97%85%E9%80%94/"}],"tags":[{"name":"Skript","slug":"Skript","permalink":"https://blog.im0o.top/tags/Skript/"}]},{"title":"博客建立","slug":"博客建立","date":"2019-07-22T21:30:18.000Z","updated":"2022-05-24T06:19:06.152Z","comments":true,"path":"posts/1628c517.html","link":"","permalink":"https://blog.im0o.top/posts/1628c517.html","excerpt":"","text":"写在前面你好，欢迎访问0o酱的个人博客，本博客主要用于分享我的一些笔记、教程、记录等。 本博客内容遵循 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，转载请注明出处。 关于我你可以前往本站的关于页面查看我的简介。 一些其他的东西你可以前往本站首页找到我的联系方式。 你可以点击菜单栏的友情链接查看我的友情链接，如果你需要添加友情链接，请按照页面上的提示填写并联系我。 欢迎前往我的吹水群聊天：点击加群","raw":null,"content":null,"categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.im0o.top/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://blog.im0o.top/tags/%E5%8D%9A%E5%AE%A2/"}]}]}